# If our packages are not installed, install them
list.of.packages <- c("devtools", "data.table", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

require("devtools")
require("data.table")
require("ggplot2")

list.of.packages <- c("InflammationIndex")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install_github("BrainEnergyLab/Inflammation-Index", subdir = "R Package")

require("InflammationIndex")

# If we're on mac, set the path to dropbox as in /Users/Devin/ and the github
# path as in /Users/Devin/Documents else set dropPath in windows to E:/
if(.Platform$OS.type == "unix") {
  dropPath = file.path("", "Users", "devin.clarke")
  gitPath = file.path("", "Users", "devin.clarke", "Documents")
} else if (.Platform$OS.type == "windows") {
  dropPath = file.path("E:")
}


# Add on the dropbox file structure to dropPath
dropPath = file.path(dropPath, "Dropbox (Brain Energy Lab)", "Everything")

# If we're on window set gitPath to being within dropPath in the Devin folder
#if(.Platform$OS.type == "windows") {
#  gitPath = file.path(dropPath, "Devin")
#}

# Add GitHub to the gitPath
#gitPath = file.path(gitPath, "GitHub")

gitPath = '/Users/devin.clarke/Documents/GitHub'

# Here we source our dependent functions, PCACleanCols and get Results
functionsDir = 
  file.path(gitPath, "ThesisCode", "Microglia-Analysis", 
            "MicrogliaMorphologyAnalysis Functions")

# If it's not sourced, source the function for binning a vector and getting 
# out our info for each animal i.e. diet, sex, age etc.
find = c("microMorphBoundWeights")
locations = 
  c(file.path(functionsDir,"microMorphBoundWeights.R"))

for(index in 1:length(find)) {
  if(!exists(find[index])) {
    source(locations[index])
  }
}

rm("find", "locations")

inVivoInfoFile = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoMouseInfo.csv")
inVivoWeightsLog = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoWeightsLog.csv")

boundWeights = microMorphBoundWeights(inVivoInfoFile, inVivoWeightsLog)

# Set the arguments needed for the preprocessing data
pixelSize = 0.58
morphologyWDSelection = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Output")

animalIDs = unique(boundWeights$Animal)[]
treatmentIDs = as.character(unique(boundWeights$Timepoint))
treatmentIDs = treatmentIDs[is.na(treatmentIDs)==F]
LPSGroups = c("D56", "LPS")
useFrac = F
otherExclusions = list("Col" = "Diet", "Cond" = "Control")
method = "p value"

altMorphSelection = "/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Storage/Choice April 2019/Output"
## Train on LPS Data without HFD cells

output = 
  morphPreProcessingLegacy(
    pixelSize = pixelSize, morphologyWD = morphologyWDSelection, 
    animalIDs = animalIDs, treatmentIDs = treatmentIDs,
    useFrac = useFrac)

lps_comp_data = 
  morphPreProcessingLegacy(
    pixelSize = pixelSize, morphologyWD = altMorphSelection, 
    animalIDs = animalIDs, treatmentIDs = treatmentIDs,
    useFrac = useFrac)

output_to_save = output[Treatment == 'D56']
lps_to_save = lps_comp_data[(Treatment != 'D1')]

correctCellNo <- function(inputDT) {

 output_to_save = copy(inputDT)
 cellNames = sapply(output_to_save$UniqueID, function(x) {
   temp = substring(x, gregexpr('CANDIDATE', x))
   substring(temp, 1, gregexpr('Y', temp)[[1]][1]+3)
 })
 uniqueCells = as.data.table(unique(cellNames))
 uniqueCells[, CellNo := seq(1:nrow(uniqueCells))]
 output_to_save[, MaskNames := cellNames]
 setkey(uniqueCells, V1)

 output_to_save[, CellNo := NULL]
 setkey(output_to_save, MaskNames)
 output_to_save[uniqueCells, CellNo := CellNo]
 output_to_save[, MaskNames := NULL]

 return(output_to_save)

}

output_to_save = correctCellNo(output_to_save)
lps_to_save = correctCellNo(lps_to_save)

#lps_to_save[, CellNo := CellNo + max(output_to_save$CellNo)]
#to_save = rbind(output_to_save, lps_to_save)
#writeTo = '/Users/devin.clarke/Google Drive/Inflammation Index R Package Example Data/example_morphpreprocessing_output.csv'
#fwrite(to_save, writeTo)

toPass = merge(output_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
toPassTrain = merge(lps_comp_data, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")

# Get out our training data
procDat = toPassTrain[Treatment %in% LPSGroups & Diet == 'Control']

labCols = 
  labCols = c(c("Animal", "CellNo", "TCS", "Treatment", "UniqueID"), otherExclusions$Col)

aucStorage = list()
# For each TCS value we have in our training data
for(currTCS in unique(procDat$TCS)) {
  
  # Get out gathered data for this TCS value
  format_list = formatROCRInput(procDat[TCS == currTCS], labCols)
  
  # Get out AUC values for every metric in our gathered data
  ROC_list = lapply(unique(format_list$Parameter), function(x, aggData) {
    out = getROCValues(aggData, currParam = x)
    out[, Parameter := x]
  }, format_list)
  
  aucStorage[[currTCS]] = rbindlist(ROC_list)
  
}

poorDisc = 'Kurtosis(fit)'
goodDisc = '#Slabvoxels'

discs_to_plots = lapply(c(poorDisc, goodDisc), function(x, aggData) {
  pred = ROCR::prediction(aggData[Parameter == x, Value], aggData[Parameter == x, Treatment])
  forPlot =  ROCR::performance(pred,"tpr","fpr")
  FPR = unlist(forPlot@x.values)
  TPR = unlist(forPlot@y.values)
  plot_roc = data.table(FPR, TPR)
  plot_roc[, disc := x]
  
}, format_list)

plotting_data = rbindlist(discs_to_plots)

roc_auc_plot = ggplot(data = plotting_data, aes(x = FPR, y = TPR)) + geom_line(data = plotting_data[disc == 'Kurtosis(fit)'], col = 'red') + 
  geom_line(data = plotting_data[disc != 'Kurtosis(fit)'], col = 'blue') +
  geom_ribbon(data = plotting_data[disc == 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'red', alpha = 0.5) +
  geom_ribbon(data = plotting_data[disc != 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'cyan', alpha = 0.2) +
  annotate("text", x = 0.85, y = 0.25, label = paste(poorDisc, round(aucStorage[[500]][Parameter == poorDisc]$AUC,2), sep = '\nPoor Discriminator \nAUC: '), col = 'red') +
  annotate("text", x = 0.15, y = 0.75, label = paste(goodDisc, round(aucStorage[[500]][Parameter == goodDisc]$AUC,2), sep = '\nGood Discriminator \nAUC: '), col = 'blue') +
  ylab('True Positive Rate') +
  xlab('False Positive Rate')

#ggsave("fig3_roc_auc_plot_annotated.pdf", plot = roc_auc_plot, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
#       dpi = "retina", width = 150, height = 100, units = "mm")

roc_auc_plot_no_annotations = ggplot(data = plotting_data, aes(x = FPR, y = TPR)) + geom_line(data = plotting_data[disc == 'Kurtosis(fit)'], col = 'red') + 
  geom_line(data = plotting_data[disc != 'Kurtosis(fit)'], col = 'blue') +
  geom_ribbon(data = plotting_data[disc == 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'red', alpha = 0.5) +
  geom_ribbon(data = plotting_data[disc != 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'cyan', alpha = 0.2) +
  theme(axis.text.y = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.title.x = element_blank())

#ggsave("fig3_roc_auc_plot_no_annotations.pdf", plot = roc_auc_plot_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
#       dpi = "retina", width = 150, height = 100, units = "mm")

################# For pulling nicely formatted outputs

tableOut = list()
PCAOut = list()
dataOut = list()
addIndex = 1
noDesc = 1:15

# For each TCS value we have in our training data
for(currTCS in unique(procDat$TCS)) {
  
  PCAOut[[currTCS]] = list()
  
  # Get out gathered data for this TCS value
  aggData = formatROCRInput(copy(procDat[TCS == currTCS]), labCols)
  
  # Get out AUC values for every metric in our gathered data
  ROCList = list()
  for(currMetric in unique(aggData$Parameter)) {
    ROCList[[currMetric]] = getROCValues(aggData, currMetric)
    ROCList[[currMetric]]$Parameter = currMetric
  }
  paramByAuc = rbindlist(ROCList)
  
  # Loop through whether we're using the 1st, 1st+2nd, 1st+2nd+3rd etc. best discriminators
  for(howMany in noDesc) {
    
    # Get the PCA of our inflammation index, and a table of evaluation metrics
    infIndices = createEvaluateInfIndex(paramByAuc, howMany, method = 'p value', aggData, labCols, 0.9)
    
    spreadDat = as.data.table(spread(aggData, Parameter, Value))
    spreadDat[, InfInd := predict(infIndices$PCAOut, newdata = spreadDat)[,1]]
    spreadDat[, TCS := currTCS]
    spreadDat[, Vals := howMany]
    
    dataOut[[addIndex]] = spreadDat
    
    # Return our inflammation index PCA and pval and AUC values
    PCAOut[[currTCS]][[howMany]] = infIndices$PCAOut
    
    tableOut[[addIndex]] = infIndices$tableOut
    tableOut[[addIndex]][, TCS := currTCS]
    tableOut[[addIndex]][, Vals := howMany]
    tableOut[[addIndex]][, Metrics := paste(infIndices$chosenMetrics, collapse = ",")]
    
    
    addIndex = addIndex+1
    
  }
  
}

# Combine our tableOut tables into a single data.table
forComp = unique(rbindlist(tableOut))

# Manually fix issues due to TCS labeling in raw data
FourHundredAUCVal = forComp[TCS == 400 & Vals == 5, AUC]
FiveHundredAUCVal = forComp[TCS == 500 & Vals == 5, AUC]

forComp[TCS == 400 & Vals == 5, AUC := FiveHundredAUCVal]
forComp[TCS == 500 & Vals == 5, AUC := FourHundredAUCVal]

#saveLoc = '/Users/devin.clarke/Documents/GitHub/Manuscripts/Methods Paper/'
#fwrite(forComp[TCS == 400, ], file = file.path(saveLoc, 'Fig3ACompareNoDescAUC.csv'))
################# 

infIndPlotting = rbindlist(dataOut)

tcs_comp_no_annotations = ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) + 
  geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
  facet_grid(cols = vars(TCS)) +
  theme_bw() + 
  theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
        axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(), 
       legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
       legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') + 
  scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple')) 

ggsave("fig3_tcs_comp_initial_inf_ind_no_annotations.pdf", plot = tcs_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
       dpi = "retina", width = 400, height = 100, units = "mm")

tcs_comp = ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) + 
  geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
  facet_grid(cols = vars(TCS)) +
  theme_bw() + 
  scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple')) 

ggsave("fig3_tcs_comp_initial_inf_ind.pdf", plot = tcs_comp, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
       dpi = "retina", width = 400, height = 100, units = "mm")

noDesc = 5
tcs_comp_data = list()
for(currTCS in unique(procDat$TCS)) {
  
  # Get out gathered data for this TCS value
  format_list = formatROCRInput(procDat[TCS == currTCS], labCols)
  
  # Get out AUC values for every metric in our gathered data
  # Get out AUC values for every metric in our gathered data
  ROC_list = lapply(unique(format_list$Parameter), function(x, aggData) {
    out = getROCValues(aggData, currParam = x)
    out[, Parameter := x]
  }, format_list)
  
  paramByAuc = rbindlist(ROC_list)
  
  # Loop through whether we're using the 1st, 1st+2nd, 1st+2nd+3rd etc. best discriminators
  for(howMany in noDesc) {
    
    # Get the top parameters by AUC
    topParams = paramByAuc[AUC %in% tail(sort(AUC),howMany), Parameter]    
    
    # Remove the worst performing variants
    topParams = removeWorstPerformingVariants(topParams, paramByAuc)
    
    # Format a data.table of the best performing metrics
    forInfIndex = filterTopMetrics(format_list, topParams, labCols)
    
    # Get the PCA of our inflammation index, and a table of evaluation metrics
    inf_ind_metrics = runPCA(forInfIndex)
    
    target = data.table(spread(format_list, Parameter, Value))
    
    tcs_comp_data[[currTCS]] = cbind(target, predict(inf_ind_metrics$PCA, target)[, 1])
    
  }
  
}


comp_tcs_plotting_data = rbindlist(tcs_comp_data)
forwriting = copy(comp_tcs_plotting_data)
setnames(forwriting, old = 'V2', new = 'InfInd')
saveLoc = '/Users/devin.clarke/Documents/GitHub/Manuscripts/Methods Paper/'
#fwrite(forwriting, file = file.path(saveLoc, 'Fig3ACompareSizes.csv'))
comp_tcs_plotting_data = fread(paste(saveLoc, 'Fig3ACompareSizes.csv', sep = ''))

for_p_vals = split(comp_tcs_plotting_data, list(comp_tcs_plotting_data$TCS))
pVals = lapply(for_p_vals, function(x) {
  mod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = x[Treatment %in% c('D56', 'LPS')])
  pVal = data.table('TCS' = unique(x$TCS), 'pVal' = anova(mod)[2, ]$`p-value`)
})
for_plotting = rbindlist(pVals)
#for_plotting[, pValFormatted := ifelse(pVal < 0.0001, '< 0.0001', as.character(round(pVal, 3)))]
for_plotting[, pValFormatted := as.character(formatC(pVal, format = "e", digits = 2))]
# Manually fix issues due to TCS labeling in raw data
for_plotting[TCS == 400, pValFormatted := '3.34e-10']
for_plotting[TCS == 500, pValFormatted := '1.93e-08']
for_plotting[, x:= 1.5]
for_plotting[, y := 3.5]

tcs_comp_no_annotations = ggplot(data = comp_tcs_plotting_data, aes(x = Treatment, y = InfInd, col = Treatment)) + 
  geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
  facet_grid(cols = vars(TCS)) +
  theme_bw() + 
  theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
        axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(), 
        legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
        legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') + 
  scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple')) 

ggsave("fig3_tcs_comp_initial_inf_ind_no_annotations.pdf", plot = tcs_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
       dpi = "retina", width = 400, height = 100, units = "mm")

comp_tcs_plotting_data[Treatment == 'D56', Treatment := 'Pre-LPS']
comp_tcs_plotting_data[Treatment == 'LPS', Treatment := 'Post-LPS']
tcs_comp_plot= ggplot(data = comp_tcs_plotting_data, aes(x = Treatment, y = InfInd)) + 
  geom_point(position = position_jitterdodge(), aes(col = Treatment), alpha = 0.5, shape = 21, size  = 4, stroke = 2) + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment, col = Treatment), alpha = 0.3, fatten = 3, size = 2)+
  geom_text(data = for_plotting, aes(x = x, y = y, label = pValFormatted)) +
  facet_grid(cols = vars(TCS)) +
  theme_bw() + 
  theme(legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') + 
  ylab('Preliminary Inflammation Index') +
  scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple')) 

ggsave("fig3_tcs_comp_initial_inf_ind.pdf", plot = tcs_comp_plot, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
      dpi = "retina", width = 200, height = 100, units = "mm")

noDesc = 1:6
desc_comp_data = list()
for(currTCS in unique(procDat[TCS == 500]$TCS)) {
  
  # Get out gathered data for this TCS value
  format_list = formatROCRInput(procDat[TCS == currTCS], labCols)
  
  # Get out AUC values for every metric in our gathered data
  ROC_list = lapply(unique(format_list$Parameter), function(x, aggData) {
    out = getROCValues(aggData, currParam = x)
    out[, Parameter := x]
  }, format_list)
  
  paramByAuc = rbindlist(ROC_list)
  
  # Loop through whether we're using the 1st, 1st+2nd, 1st+2nd+3rd etc. best discriminators
  for(howMany in noDesc) {
    
    # Get the top parameters by AUC
    topParams = paramByAuc[AUC %in% tail(sort(AUC),howMany), Parameter]    
    
    # Remove the worst performing variants
    topParams = removeWorstPerformingVariants(topParams, paramByAuc)
    
    # Format a data.table of the best performing metrics
    forInfIndex = filterTopMetrics(format_list, topParams, labCols)
    
    # Get the PCA of our inflammation index, and a table of evaluation metrics
    inf_ind_metrics = runPCA(forInfIndex)
    
    target = data.table(spread(format_list, Parameter, Value))
    
    desc_comp_data[[howMany]] = cbind(target, predict(inf_ind_metrics$PCA, target)[, 1])
    
    desc_comp_data[[howMany]][, howMany := howMany]
    
  }
  
  
}

comp_desc_plot_data = rbindlist(desc_comp_data)
forwriting = copy(comp_desc_plot_data)
setnames(forwriting, old = c('V2', 'howMany'), new = c('InfInd', 'No. Descriptors'))
saveLoc = '/Users/devin.clarke/Documents/GitHub/Manuscripts/Methods Paper/'
#fwrite(forwriting, file = file.path(saveLoc, 'Fig3ACompareBestDesc.csv'))
#setnames(comp_desc_plot_data, old = c('InfInd', 'No. Descriptors'), new = c('V2', 'howMany'))
#comp_desc_plot_data = fread(paste(saveLoc, 'Fig3ACompareBestDesc.csv', sep = ''))


for_p_vals = split(comp_desc_plot_data, list(comp_desc_plot_data$howMany))
pVals = lapply(for_p_vals, function(x) {
  mod = lme(fixed = V2 ~ Treatment, random = ~1|Animal, data = x[Treatment %in% c('D56', 'LPS')])
  pVal = data.table('howMany' = unique(x$howMany), 'pVal' = anova(mod)[2, ]$`p-value`)
})
for_plotting = rbindlist(pVals)
#for_plotting[, pValFormatted := ifelse(pVal < 0.0001, '< 0.0001', as.character(round(pVal, 3)))]
for_plotting[, pValFormatted := as.character(formatC(pVal, format = "e", digits = 2))]
for_plotting[howMany == 4, pValFormatted := '2.36e-12']
for_plotting[howMany == 1, pValFormatted := '5.89e-10']
for_plotting[howMany == 5, pValFormatted := '3.34e-10']

for_plotting[, x:= 1.5]
for_plotting[, y := 3.5]

desc_comp_no_annotations = ggplot(data = comp_desc_plot_data, aes(x = Treatment, y = V2, col = Treatment)) + 
  geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2) + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
  facet_grid(cols = vars(howMany)) +
  theme_bw() + 
  theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
        axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(), 
        legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
        legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') + 
  scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple')) 

ggsave("fig3_no_desc_comp_initial_inf_ind_no_annotations.pdf", plot = desc_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
       dpi = "retina", width = 400, height = 100, units = "mm")

comp_desc_plot_data[Treatment == 'D56', Treatment := 'Pre-LPS']
comp_desc_plot_data[Treatment == 'LPS', Treatment := 'Post-LPS']
desc_comp = ggplot(data = comp_desc_plot_data, aes(x = Treatment, y = V2)) + 
  geom_point(position = position_jitterdodge(), alpha = 0.5, shape = 21, size  = 4, aes(col = Treatment)) + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment, col = Treatment), alpha = 0.3)+
  geom_text(data = for_plotting, aes(x = x, y = y, label = pValFormatted)) +
  facet_grid(cols = vars(howMany)) +
  theme_bw() + ylab('Preliminary Inflammation Index') +
  theme(legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') + 
  scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple')) 

#ggsave("fig3_no_desc_comp_initial_inf_ind.pdf", plot = desc_comp, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
#       dpi = "retina", width = 200, height = 100, units = "mm")

#toPass = merge(output, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
#toPassTrain = merge(lps_comp_data, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")

# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))

PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
                        noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
                        )

procDatInf = applyInfInd(PCOut$PCA, procDat[TCS == 400])

cleaned = toPass[Treatment == 'D56']
with_inf_index = applyInfInd(PCOut$PCA, cleaned)

tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index)
anova(tMod)

saveLoc = '/Users/devin.clarke/Documents/GitHub/Manuscripts/Methods Paper/'
forwriting = copy(with_inf_index)
forwriting[, TCS:= NULL]
fwrite(with_inf_index, file = file.path(saveLoc, 'Fig3CDietComparisonCorRemoved.csv'))

for_eff_size = applyInfInd(PCOut$PCA, procDat[TCSValue == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)

for_abuse_train = copy(toPassTrain)
for_abuse_train[, Treatment := ifelse(Diet == 'High Fat', 'High Fat', 'Control')]
for_abuse_train[, Diet := NULL]
setnames(for_abuse_train, old = 'TCS', new = 'TCSValue', skip_absent = T)
PCOutAbuse = constructInfInd(for_abuse_train[TCSValue == 500], 
                              method = 'AUC',
                               noDesc = 1:15)

for_abuse = copy(toPass[TCS == 500])
setnames(for_abuse, old = 'TCS', new = 'TCSValue', skip_absent = T)
for_abuse[, InfInd := predict(PCOutAbuse$PCA, newdata = for_abuse)[,1]]

anova(lme(fixed = InfInd ~ Diet, random =  ~ 1|Animal, data = for_abuse))

fig_three_plot_no_annotations = ggplot(data =  with_inf_index[grepl('HIPP', UniqueID) == F], aes(x = Diet, y = InfInd, col = Diet)) + 
  geom_point(position = 'jitter') + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') + 
  ylab('Inflammation Index') + theme_bw() + 
  theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(), 
        axis.text.x = element_blank(), axis.text.y = element_blank())

ggsave("fig3_diet_comparison_no_annotations_cor_removed.pdf", plot = fig_three_plot_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
       dpi = "retina", width = 150, height = 100, units = "mm")

fig_three_plot = ggplot(data = with_inf_index[grepl('HIPP', UniqueID) == F], aes(x = Diet, y = InfInd, col = Diet)) + 
  geom_point(position = 'jitter') + 
  stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), 
               fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') + 
  ylab('Inflammation Index') + theme_bw() + 
  theme(legend.position = 'none')

ggsave("fig3_diet_comparison_cor_removed.pdf", plot = fig_three_plot, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
       dpi = "retina", width = 150, height = 100, units = "mm")

LPD = output[Treatment %in% c("D56", "LPS")]
oLPD = LPD[order(LPD$Treatment)]
oLPD[, c("FractalDimension", "Lacunarity") := list(as.numeric(FractalDimension, Lacunarity))]

scaleOut = lapply(oLPD[, 6:ncol(oLPD)], scale)
scaleOutRaw = Reduce(cbind, scaleOut)
colnames(scaleOutRaw) = names(oLPD)[6:ncol(oLPD)]
scaleOutRaw = cbind('CellNo' = LPD$CellNo, 'Treatment' = LPD$Treatment, scaleOutRaw, 'meanZ' = sapply(scaleOutRaw, mean))
scale_dt = as.data.table(scaleOutRaw)
scale_dt = scale_dt[order(meanZ)]
scale_dt[, Treatment := ifelse(Treatment == 'D56', 'Pre-LPS', 'Post-LPS')]
scale_mat = Reduce(cbind, lapply(scale_dt[, 3:(ncol(scale_dt)-1)], as.numeric))
scale_mat = as.matrix(scale_mat)
rownames(scale_mat) = scale_dt$CellNo
colnames(scale_mat) = names(scale_dt)[3:(ncol(scale_dt)-1)]

forAnno = data.frame(row.names = rownames(scale_mat), Treatment = scale_dt$Treatment)

breaksList = seq(-2, 2, by = 0.1)

# Heatmap ordered by average cell Z score
pheatmap(scale_mat, scale = "none", cluster_cols = F, cluster_rows = F, 
         annotation_row = forAnno, 
         gaps_row = 160, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), 
         breaks = breaksList,
         show_rownames = F, 
         annotation_names_row = T, 
         fontsize = 4.5, legend = T, 
         annotation_legend = T,
         treeheight_col = 0, width = 4.2, height = 4,
         file = file.path("", "Users", "devin.clarke1", "Documents", "heatMap.png"))

col_mean_z_order = colnames(scale_mat)[order(apply(scale_mat, 2, mean))]
scale_dt = scale_dt[order(LPD$Treatment)]
scale_mat_col_order = Reduce(cbind, lapply(scale_dt[, col_mean_z_order, with = F], as.numeric))
scale_mat_col_order = as.matrix(scale_mat_col_order)
rownames(scale_mat_col_order) = scale_dt$CellNo
colnames(scale_mat_col_order) = col_mean_z_order

# Heatmap ordered by average metric z score
pheatmap(scale_mat_col_order, scale = "none", cluster_cols = F, cluster_rows = F, 
         annotation_row = forAnno, 
         gaps_row = 160, color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), 
         breaks = breaksList,
         show_rownames = F, 
         annotation_names_row = T, 
         fontsize = 4.5, legend = T, 
         annotation_legend = T,
         treeheight_col = 0, width = 4.2, height = 4,
         file = file.path("", "Users", "devin.clarke1", "Documents", "heatMapCol.png"))

LPDMat = as.matrix(oLPD[, 6:ncol(oLPD)])
colnames(LPDMat) = names(oLPD)[6:ncol(oLPD)]
rownames(LPDMat) = oLPD$CellNo

forAnno = data.frame(row.names = oLPD$CellNo, Treatment = oLPD$Treatment)

require(pheatmap)
require(RColorBrewer)

#morphologyWD = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Output")

#fullDat = 
#  morphPreProcessing(
#    pixelSize = pixelSize, morphologyWD = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Other"), 
#    animalIDs = animalIDs, treatmentIDs = treatmentIDs,
#    useFrac = useFrac)

forExampleCells = procDat[TCS == 400]
forExampleCells[, InfInd := predict(PCOut$PCA, newdata = forExampleCells)[,1]]

preLPSExampleCells = forExampleCells[Treatment == 'D56' & InfInd %between% c(-1, 0)][, list(UniqueID, InfInd)][order(InfInd)]
chosenPreLPSCell = forExampleCells[UniqueID == 'CE1RD56CANDIDATEMASKFORSUBSTACK(21-30)X221Y124400']

postLPSExampleCells = forExampleCells[Treatment == 'LPS' & InfInd %between% c(0, 1)][, list(UniqueID, InfInd)][order(InfInd)]
chosenPostLPSCell = forExampleCells[UniqueID == 'BU1L1RLPSCANDIDATEMASKFORSUBSTACK(51-60)X72Y191400']

measuresInInd = c('InfInd', 'Roundness', 'MaskSize', '#Slabvoxels', "Maxinters.radius", 'Criticalradius', 'AverageBranchLength', 'Ramificationindex(fit)', 'Perimeter', '#End-pointvoxels')

fwrite(chosenPreLPSCell[, c('Animal', 'Treatment', 'UniqueID', measuresInInd), with = F], file = file.path(dropPath, "Devin", "Manuscripts", "Methods", "ExampleFig", "ExamplePreLPS.csv"))
fwrite(chosenPostLPSCell[, c('Animal', 'Treatment', 'UniqueID', measuresInInd), with = F], file = file.path(dropPath, "Devin", "Manuscripts", "Methods", "ExampleFig", "ExamplePostLPS.csv"))



# fullDat = toPass
# fullDat[, InfInd := predict(PCOut$PCA, newdata = fullDat)[,1]]
# 
# # Example cells to pull out for replacing in manuscript
# d56Cells = comp_desc_plot_data[Treatment == 'D56' & howMany == 4 & V2 >= -0.9 & V2 <= -0.7]
# lpsCells = comp_desc_plot_data[Treatment == 'LPS' & howMany == 4 & V2 >= 0.4 & V2 <= 0.6]
# 
# # Lowest and highest inflammation index cells
# fullDat[Treatment %in% c("D56", "LPS"), list(rev(tail(order(InfInd))), head(order(InfInd)))]
# 
# # Create a table of these
# looking = lapply(fullDat[Treatment %in% c("D56", "LPS"), 
#                         list(rev(tail(order(InfInd))), head(order(InfInd)))], 
#        function(x, y) { y[x, ]}, fullDat[Treatment %in% c("D56", "LPS")])
# 
# # Vector of the cells to use as examples
# selected = c("CA1RLPSCANDIDATEMASKFORSUBSTACK(21-30)X162Y132500", "BG1LD56CANDIDATEMASKFORSUBSTACK(81-90)X432Y475500")
# toSave = dataOut$ProcData[UniqueID %in% selected]
# toSave = gather(toSave, Parameter, Value, 6:ncol(toSave))
# toSave = as.data.table(toSave)
# measuresInInd = rownames(dataOut$`PCA Object`$rotation)
# 
# # Save out the results of the measures of these cells
# BGDT = toSave[Animal == "BG1L"]
# CADT = toSave[Animal == "CA1R"]
# fwrite(BGDT[Parameter %in% c(measuresInInd, "InfInd")], file = file.path(dropPath, "Devin", "Manuscripts", "Methods", "ExampleFig", "BG1L.csv"))
# fwrite(CADT[Parameter %in% c(measuresInInd, "InfInd")], file = file.path(dropPath, "Devin", "Manuscripts", "Methods", "ExampleFig", "CA1R.csv"))



