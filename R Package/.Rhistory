# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
currMetric = 'CriticalValue'
getROCValues(aggData, currMetric)
aggData
aggData[Parameter == 'getROCValues(aggData, currMetric)']
aggData[Parameter == 'CriticalValue']
aggData
procDat
procDat[complete.cases(procDat)]
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
infIndOut =
constructInfInd(inDat = inDat,
method = 'p value')
load_all()
infIndOut =
constructInfInd(inDat = inDat,
method = 'p value')
document()
load_all()
infIndOut =
constructInfInd(inDat = inDat,
method = 'p value')
warnings()
load_all()
warnings()
infIndOut =
constructInfInd(inDat = inDat,
method = 'p value')
# If our packages are not installed, install them
list.of.packages <- c("devtools", "data.table", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require("devtools")
require("data.table")
require("ggplot2")
list.of.packages <- c("InflammationIndex")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install_github("BrainEnergyLab/Inflammation-Index", subdir = "R Package")
require("InflammationIndex")
# If we're on mac, set the path to dropbox as in /Users/Devin/ and the github
# path as in /Users/Devin/Documents else set dropPath in windows to E:/
if(.Platform$OS.type == "unix") {
dropPath = file.path("", "Users", "devin.clarke")
gitPath = file.path("", "Users", "devin.clarke", "Documents")
} else if (.Platform$OS.type == "windows") {
dropPath = file.path("E:")
}
# Add on the dropbox file structure to dropPath
dropPath = file.path(dropPath, "Dropbox (Brain Energy Lab)", "Everything")
# If we're on window set gitPath to being within dropPath in the Devin folder
#if(.Platform$OS.type == "windows") {
#  gitPath = file.path(dropPath, "Devin")
#}
# Add GitHub to the gitPath
#gitPath = file.path(gitPath, "GitHub")
gitPath = '/Users/devin.clarke/Documents/GitHub'
# Here we source our dependent functions, PCACleanCols and get Results
functionsDir =
file.path(gitPath, "ThesisCode", "Microglia-Analysis",
"MicrogliaMorphologyAnalysis Functions")
# If it's not sourced, source the function for binning a vector and getting
# out our info for each animal i.e. diet, sex, age etc.
find = c("microMorphBoundWeights")
locations =
c(file.path(functionsDir,"microMorphBoundWeights.R"))
for(index in 1:length(find)) {
if(!exists(find[index])) {
source(locations[index])
}
}
rm("find", "locations")
inVivoInfoFile = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoMouseInfo.csv")
inVivoWeightsLog = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoWeightsLog.csv")
boundWeights = microMorphBoundWeights(inVivoInfoFile, inVivoWeightsLog)
# Set the arguments needed for the preprocessing data
pixelSize = 0.58
morphologyWDSelection = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Output")
animalIDs = unique(boundWeights$Animal)[]
treatmentIDs = as.character(unique(boundWeights$Timepoint))
treatmentIDs = treatmentIDs[is.na(treatmentIDs)==F]
LPSGroups = c("D56", "LPS")
useFrac = F
otherExclusions = list("Col" = "Diet", "Cond" = "Control")
method = "p value"
altMorphSelection = "/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Storage/Choice April 2019/Output"
## Train on LPS Data without HFD cells
output =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = morphologyWDSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
lps_comp_data =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = altMorphSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
output_to_save = output[Treatment == 'D56']
lps_to_save = lps_comp_data[(Treatment != 'D1')]
correctCellNo <- function(inputDT) {
output_to_save = copy(inputDT)
cellNames = sapply(output_to_save$UniqueID, function(x) {
temp = substring(x, gregexpr('CANDIDATE', x))
substring(temp, 1, gregexpr('Y', temp)[[1]][1]+3)
})
uniqueCells = as.data.table(unique(cellNames))
uniqueCells[, CellNo := seq(1:nrow(uniqueCells))]
output_to_save[, MaskNames := cellNames]
setkey(uniqueCells, V1)
output_to_save[, CellNo := NULL]
setkey(output_to_save, MaskNames)
output_to_save[uniqueCells, CellNo := CellNo]
output_to_save[, MaskNames := NULL]
return(output_to_save)
}
output_to_save = correctCellNo(output_to_save)
lps_to_save = correctCellNo(lps_to_save)
#lps_to_save[, CellNo := CellNo + max(output_to_save$CellNo)]
#to_save = rbind(output_to_save, lps_to_save)
#writeTo = '/Users/devin.clarke/Google Drive/Inflammation Index R Package Example Data/example_morphpreprocessing_output.csv'
#fwrite(to_save, writeTo)
toPass = merge(output_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
toPassTrain = merge(lps_comp_data, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
# Get out our training data
procDat = toPassTrain[Treatment %in% LPSGroups & Diet == 'Control']
labCols =
labCols = c(c("Animal", "CellNo", "TCS", "Treatment", "UniqueID"), otherExclusions$Col)
aucStorage = list()
# For each TCS value we have in our training data
for(currTCS in unique(procDat$TCS)) {
# Get out gathered data for this TCS value
format_list = formatROCRInput(procDat[TCS == currTCS], labCols)
# Get out AUC values for every metric in our gathered data
ROC_list = lapply(unique(format_list$Parameter), function(x, aggData) {
out = getROCValues(aggData, currParam = x)
out[, Parameter := x]
}, format_list)
aucStorage[[currTCS]] = rbindlist(ROC_list)
}
tableOut = list()
PCAOut = list()
dataOut = list()
addIndex = 1
noDesc = 1:15
# For each TCS value we have in our training data
for(currTCS in unique(procDat$TCS)) {
PCAOut[[currTCS]] = list()
# Get out gathered data for this TCS value
aggData = formatROCRInput(copy(procDat[TCS == currTCS]), labCols)
# Get out AUC values for every metric in our gathered data
ROCList = list()
for(currMetric in unique(aggData$Parameter)) {
ROCList[[currMetric]] = getROCValues(aggData, currMetric)
ROCList[[currMetric]]$Parameter = currMetric
}
paramByAuc = rbindlist(ROCList)
# Loop through whether we're using the 1st, 1st+2nd, 1st+2nd+3rd etc. best discriminators
for(howMany in noDesc) {
# Get the PCA of our inflammation index, and a table of evaluation metrics
infIndices = createEvaluateInfIndex(paramByAuc, howMany, method = 'p value', aggData, labCols, 0.9)
spreadDat = as.data.table(spread(aggData, Parameter, Value))
spreadDat[, InfInd := predict(infIndices$PCAOut, newdata = spreadDat)[,1]]
spreadDat[, TCS := currTCS]
spreadDat[, Vals := howMany]
dataOut[[addIndex]] = spreadDat
# Return our inflammation index PCA and pval and AUC values
PCAOut[[currTCS]][[howMany]] = infIndices$PCAOut
tableOut[[addIndex]] = infIndices$tableOut
tableOut[[addIndex]][, TCS := currTCS]
tableOut[[addIndex]][, Vals := howMany]
tableOut[[addIndex]][, Metrics := paste(infIndices$chosenMetrics, collapse = ",")]
addIndex = addIndex+1
}
}
# Combine our tableOut tables into a single data.table
forComp = unique(rbindlist(tableOut))
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
load_all()
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
forComp
forComp
load_all()
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
load_all()
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
load_all()
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
adjTopParams
load_all()
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
load_all()
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
corOut
load_all()
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'p value',
noDesc = 4, labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(inDat = inDat,
method = 'p value')
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
document()
?install
?build
load_all()
require(devtools)
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
document()
load_all()
document()
build()
install()
