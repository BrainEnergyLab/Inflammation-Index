# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
document()
load_all()
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
document()
load_all()
document()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
document()
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalIDs,
treatmentIDs = treatmentIDs,
useFrac = F
)
LPSGroups = c('HFDD-1 T1', 'HFDD-1 T6')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = outDt[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'p value'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
require(devtools)
document()
load_all()
require(devtools)
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/LPS Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs
animalTreatmentIDs
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
animalTreatmentIDs$animalIDs
animalTreatmentIDs$animalIDs
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
idList
idList
imageName
idList
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
outDt
outDt
outDt
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
passList$`Cell Parameters`$Locations
comboList$`Cell Parameters`$Files
mapList$`Cell Parameters`$Files
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapStuff$`Cell Parameters`
getIDFromLocations(treatmentIDs, storageList$`Cell Parameters`$Location)
treatmentIDs
storageList$`Cell Parameters`$Location
storageList$`Cell Parameters`$Location[0]
storageList$`Cell Parameters`$Location[1]
treatmentIDs
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
idList
idList
locations
grabStuff = sapply(locations, function(x) substring(x, gregexpr('Output', x)))
grabStuff
grabStuff[1]
imageName = as.vector(sapply(grabStuff, function(x) strsplit(x, '/')[[1]][2]))
imageName
imageName[1]
idList[1]
idList
grabStuff
grabStuff[1]
strsplit(grabStuff[1], '/')
strsplit(grabStuff[1], '/')[[1]]
strsplit(grabStuff[1], '/')[[1]][2]
idList
locations
animals
idList
idList[1]
currentAnimal
currentAnimal
currentAnimal
matches = as.vector(sapply(locations, function(x) grepl(currentAnimal, x)))
matches
locations
matches = as.vector(sapply(locations, function(x) grepl(currentAnimal, upper(x))))
matches = as.vector(sapply(locations, function(x) grepl(currentAnimal, toupper(x))))
matches
locations
idList
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapList$`Cell Parameters`$Files
toupper(treatmentIDs)
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
idList
idList
currentAnimal
currentAnimal
matches = as.vector(sapply(locations, function(x) grepl(currentAnimal, x)))
matches
x
locations
matches = as.vector(sapply(toupper(locations), function(x) grepl(currentAnimal, x)))
matches
toupper(locations)
currentAnimal
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapStuff$`Cell Parameters`$Treatment
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
outDt
outDt
load_all
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapList$`Cell Parameters`$Files
with_id
with_id$`Cell Parameters`$Files
common_data$`Cell Parameters`$Files
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
with_id$`Cell Parameters`$Files
Intersections
uniqueIDList
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
comboList$`Hull and Circularity`$Files
comboList$FracLac$Files
cleanList$FracLac$Files
cleanList$`Hull and Circularity`$Files
cleanList$`Sholl Parameters`$Files
mapList$FracLac$Files
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapList$FracLac$Files
mapList[['Hull and Circularity']]
mapList[['Hull and Circularity']]$Files
mapList[['Hull and Circularity']]$Files[Animal %in% animalIDs]
mapList[['Hull and Circularity']]$Files[Treatment %in% treatmentIDs]
mapList[['Hull and Circularity']]$Files$Treatment
comboList$FracLac$Files
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
returnVectorOfMatchingValues(animalIDs, storageList$`Hull and Circularity`$Files$Location)
returnVectorOfMatchingValues(treatmentIDs, storageList$`Hull and Circularity`$Files$Location)
storageList$`Hull and Circularity`$Files$Location
treatmentIDs
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
returnVectorOfMatchingValues(treatmentIDs, storageList$`Hull and Circularity`$Files$Location),
returnVectorOfMatchingValues(treatmentIDs, storageList$`Hull and Circularity`$Files$Location)
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
cleanList$FracLac$Files
cleanList$`Hull and Circularity`$Files
common_data$FracLac$Files
common_data$`Hull and Circularity`$Files
outDt
outDt
unique(outDt$Treatment)
lpsData = copy(outDt)
lpsData[Treatment != 'LPS T1', Treatment := 'D56 T1']
LPSGroups = c('LPS T1', 'D56 T1')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = lpsData[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
infIndOut =
constructInfInd(procDat = inDat,
method = method)
infIndOut
require(devtools)
load_all()
document()
load_all()
