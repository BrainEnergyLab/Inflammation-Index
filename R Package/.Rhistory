)
mapList$`Cell Parameters`$Files
toupper(treatmentIDs)
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
idList
idList
currentAnimal
currentAnimal
matches = as.vector(sapply(locations, function(x) grepl(currentAnimal, x)))
matches
x
locations
matches = as.vector(sapply(toupper(locations), function(x) grepl(currentAnimal, x)))
matches
toupper(locations)
currentAnimal
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapStuff$`Cell Parameters`$Treatment
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
outDt
outDt
load_all
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapList$`Cell Parameters`$Files
with_id
with_id$`Cell Parameters`$Files
common_data$`Cell Parameters`$Files
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
with_id$`Cell Parameters`$Files
Intersections
uniqueIDList
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
comboList$`Hull and Circularity`$Files
comboList$FracLac$Files
cleanList$FracLac$Files
cleanList$`Hull and Circularity`$Files
cleanList$`Sholl Parameters`$Files
mapList$FracLac$Files
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapList$FracLac$Files
mapList[['Hull and Circularity']]
mapList[['Hull and Circularity']]$Files
mapList[['Hull and Circularity']]$Files[Animal %in% animalIDs]
mapList[['Hull and Circularity']]$Files[Treatment %in% treatmentIDs]
mapList[['Hull and Circularity']]$Files$Treatment
comboList$FracLac$Files
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
returnVectorOfMatchingValues(animalIDs, storageList$`Hull and Circularity`$Files$Location)
returnVectorOfMatchingValues(treatmentIDs, storageList$`Hull and Circularity`$Files$Location)
storageList$`Hull and Circularity`$Files$Location
treatmentIDs
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
returnVectorOfMatchingValues(treatmentIDs, storageList$`Hull and Circularity`$Files$Location),
returnVectorOfMatchingValues(treatmentIDs, storageList$`Hull and Circularity`$Files$Location)
load_all()
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
cleanList$FracLac$Files
cleanList$`Hull and Circularity`$Files
common_data$FracLac$Files
common_data$`Hull and Circularity`$Files
outDt
outDt
unique(outDt$Treatment)
lpsData = copy(outDt)
lpsData[Treatment != 'LPS T1', Treatment := 'D56 T1']
LPSGroups = c('LPS T1', 'D56 T1')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = lpsData[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = 'p value')
infIndOut =
constructInfInd(procDat = inDat,
method = method)
infIndOut
require(devtools)
load_all()
document()
load_all()
require(devtools)
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/LPS Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalIDs = c('BG1L')
treatmentIDs = c('HFDD-1 T1',
'HFDD-1 T2',
'HFDD-1 T3',
'HFDD-1 T4',
'HFDD-1 T5',
'HFDD-1 T6')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
lpsData = copy(outDt)
lpsData[Treatment != 'LPS T1', Treatment := 'D56 T1']
LPSGroups = c('LPS T1', 'D56 T1')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = lpsData[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = method)
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/LPS Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
lpsData = copy(outDt)
lpsData[Treatment != 'LPS T1', Treatment := 'D56 T1']
LPSGroups = c('LPS T1', 'D56 T1')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = lpsData[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = method)
load_all()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/LPS Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
lpsData = copy(outDt)
lpsData[Treatment != 'LPS T1', Treatment := 'D56 T1']
LPSGroups = c('LPS T1', 'D56 T1')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = lpsData[Treatment %in% LPSGroups]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = method)
?applyInfInd
infDt = applyInfInd(infIndOut, outDt)
infDt = applyInfInd(infIndOut$PCA, outDt
)
infDt
infDt
require(ggplot2)
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + geom_point()
inDat$Treatment
infDt = applyInfInd(infIndOut$PCA, inDat)
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + geom_point()
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + geom_point() + stat_summary(fun = mean, geom = 'line')
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + geom_point() + stat_summary(fun = mean, geom = 'point')
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + stat_summary(fun = mean, geom = 'point')
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'point')
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar')
anova(aov(infDt ~ Treatment, data = infDt))
anova(aov(infInd ~ Treatment, data = infDt))
anova(aov(InfInd ~ Treatment, data = infDt))
ggplot(data = infDt, aes(x = Treatment, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') + geom_point()
ggplot(data = infDt[TCS == 200], aes(x = Treatment, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') + geom_point()
ggplot(data = infDt[TCSValue == 200], aes(x = Treatment, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') + geom_point()
anova(aov(InfInd ~ Treatment, data = infDt[TCSValue == 200]))
infDt[TCSValue == 200]
infDt[TCSValue == 200 & complete.cases(infDt)]
ggplot(data = infDt[TCSValue == 200], aes(x = Treatment, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') +
geom_point()
anova(aov(InfInd ~ Treatment, data = infDt[TCSValue == 200 & complete.cases(infDt)]))
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
outDt
outDt
outDtInf = applyInfInd(infIndOut$PCA, outDt)
outDtInf
outDtInf
outDtInf = outDtInf[complete.cases(outDtInf)
]
outDtInf
outDtInf[, .N, by = CellNo]
outDtInf = applyInfInd(infIndOut$PCA, outDt)
outDtInf = outDtInf[complete.cases(outDtInf) & TCSValue == 200]
outDtInf
outDtInf[, .N, by = CellNo]
outDtInf[, .N, by = Animal]
outDtInf[, .N, by = list(Animal, Treatment)]
outDtInf[order(Animal), .N, by = list(Animal, Treatment)]
lme(InfInd ~ Treatment, data = outDtInf, random = ~1|Animal)
anova(lme(InfInd ~ Treatment, data = outDtInf, random = ~1|Animal))
anova(lme(InfInd ~ Treatment, data = outDtInf, random = ~1|CellNo/Animal))
anova(lme(InfInd ~ Treatment, data = outDtInf, random = ~1|Animal/CellNo))
anova(lme(InfInd ~ Treatment, data = outDtInf, random = ~1|CellNo/Animal))
outDtInf
outDtInf[, list(UniqueID, CellNo)]
outDtInf[order(UniquID), list(UniqueID, CellNo)]
outDtInf[order(UniqueID), list(UniqueID, CellNo)]
unique(infDt$Animal)
outDtInf
outDtInf[, .N, by = list(Animal, Treatment)]
outDtInf[order(Animal), .N, by = list(Animal, Treatment)]
outDtInf[order(Animal), .N, by = list(Animal, Treatment)][, .N, by = Animal]
outDtInf[order(Animal), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]
animalsToUse = outDtInf[order(Animal), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]
anova(lme(InfInd ~ Treatment, data = outDtInf[Animal %in% animalsToUse], random = ~1|CellNo/Animal))
animalsToUse
animalsToUse = outDtInf[order(Animal), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]$Animal
anova(lme(InfInd ~ Treatment, data = outDtInf[Animal %in% animalsToUse], random = ~1|CellNo/Animal))
anova(lme(InfInd ~ Treatment, data = outDtInf[Animal %in% animalsToUse], random = ~1|Animal))
# If we're on mac, set the path to dropbox as in /Users/Devin/ and the github
# path as in /Users/Devin/Documents else set dropPath in windows to E:/
if(.Platform$OS.type == "unix") {
dropPath = file.path("", "Users", "devin.clarke")
gitPath = file.path("", "Users", "devin.clarke", "Documents")
} else if (.Platform$OS.type == "windows") {
dropPath = file.path("E:")
}
# Add on the dropbox file structure to dropPath
dropPath = file.path(dropPath, "Dropbox (Brain Energy Lab)", "Everything")
# If we're on window set gitPath to being within dropPath in the Devin folder
#if(.Platform$OS.type == "windows") {
#  gitPath = file.path(dropPath, "Devin")
#}
# Add GitHub to the gitPath
#gitPath = file.path(gitPath, "GitHub")
gitPath = '/Users/devin.clarke/Documents/GitHub'
# Here we source our dependent functions, PCACleanCols and get Results
functionsDir =
file.path(gitPath, "ThesisCode", "Microglia-Analysis",
"MicrogliaMorphologyAnalysis Functions")
# If it's not sourced, source the function for binning a vector and getting
# out our info for each animal i.e. diet, sex, age etc.
find = c("microMorphBoundWeights")
locations =
c(file.path(functionsDir,"microMorphBoundWeights.R"))
for(index in 1:length(find)) {
if(!exists(find[index])) {
source(locations[index])
}
}
rm("find", "locations")
inVivoInfoFile = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoMouseInfo.csv")
inVivoWeightsLog = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoWeightsLog.csv")
boundWeights = microMorphBoundWeights(inVivoInfoFile, inVivoWeightsLog)
boundWeights
boundWeights
unique(boundWeights[, list(Animal, Diet)])
unique(boundWeights[Diet == 'Control', list(Animal, Diet)])
unique(boundWeights[Diet == 'Control', list(Animal, Diet)])$Animalk
unique(boundWeights[Diet == 'Control', list(Animal, Diet)])$Animal
controlIDs = c("BK1L", "BR1R", "BT1L", "BU1L1R", "BX1R", "CE1L", "CE1R",  "CW2R",  "DARTH","SNOKE")
controlIDs
unique(lpsData$Animal)
lpsData[Animal %in% controlIDs]
unique(lpsData[Animal %in% controlIDs]$Animal)
controlIDs = c("BK1L", "BR1R", "BT1L", "BU1L1R", "BX1R", "CE1L", "CE1R",  "CW2R",  "DARTH","SNOKE")
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = lpsData[Treatment %in% LPSGroups & Animal %in% controlIDs]
# The method to use to refine the inflammation index,
# can also take the value 'AUC
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = method)
infDt = applyInfInd(infIndOut$PCA, inDat)
require(ggplot2)
ggplot(data = infDt[TCSValue == 200], aes(x = Treatment, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') +
geom_point()
anova(aov(InfInd ~ Treatment, data = infDt[TCSValue == 200 & complete.cases(infDt)]))
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
outDtInf = applyInfInd(infIndOut$PCA, outDt)
outDtInf = outDtInf[complete.cases(outDtInf) & TCSValue == 200]
animalsToUse = outDtInf[order(Animal), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]$Animal
anova(lme(InfInd ~ Treatment, data = outDtInf[Animal %in% animalsToUse], random = ~1|Animal))
outDt
outDtInf
ggplot(data = outDtInf, aes(x = Treatment, y = InfInd)) + geom_point()
infDt
ggplot(data = infDt$InfInd) + geom_point()
ggplot(data = infDt, aes(y = InfInd)) + geom_point()
plot(infDt$InfInd)
plot(outDtInf$InfInd)
infIndOut$`Metric Correlations`
outDtInf = applyInfInd(infIndOut$PCA, outDt[complete.cases(outDtInf) & TCSValue == 200])
outDtInf
outDtInf
outDtInf = applyInfInd(infIndOut$PCA, outDt[TCSValue == 200])
outDtInf = outDtInf[complete.cases(outDtInf)]
outDtInf
outDtInf[Animal %in% animalsToUse]
outDtInf[Animal %in% animalsToUse & InfInd != -332.85576183]
outDtInf[Animal %in% animalsToUse & InfInd > -332.85576183]
anova(lme(InfInd ~ Treatment, data = outDtInf[Animal %in% animalsToUse & InfInd > -332.85576183], random = ~1|Animal))
outDtInf[Animal %in% animalsToUse & InfInd > -332.85576183]
cleanData = outDtInf[Animal %in% animalsToUse & InfInd > -332.85576183]
ggplot(data = cleanData, aes(x = Treatment, y = InfInd)) + geom_point()
outDtInf$Treatment
outDtInf = outDtInf[complete.cases(outDtInf)]
animalsToUse = outDtInf[order(Animal), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]$Animal
outDtInf[grepl('T1', Treatment), newLab := 'T1']
outDtInf[grepl('T2', Treatment), newLab := 'T2']
outDtInf
outDtInf[, list(newLab, Treatment)]
outDtInf[grepl('T1', Treatment), newLab := 'T1']
outDtInf[grepl('T2', Treatment), newLab := 'T2']
animalsToUse = outDtInf[order(Animal) & newLab %in% c('T1', 'T2'), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]$Animal
cleanData = outDtInf[Animal %in% animalsToUse & newLab %in% c('T1', 'T2')]
cleanData
cleanData = outDtInf[Animal %in% animalsToUse & newLab %in% c('T1', 'T2') & InfInd > -330]
cleanData
anova(lme(InfInd ~ Treatment, data = cleanData, random = ~1|Animal))
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) + geom_point()
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar')
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
outDtInf = applyInfInd(infIndOut$PCA, outDt[TCSValue == 200])
outDtInf = outDtInf[complete.cases(outDtInf)]
outDtInf[grepl('T1', Treatment), newLab := 'T1']
outDtInf[grepl('T2', Treatment), newLab := 'T2']
outDtInf[grepl('T4', Treatment), newLab := 'T4']
outDtInf[order(Animal) & newLab %in% c('T1', 'T4'), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]$Animal
outDt
outDt[TCSValue == 200]
outDtInf[TCSValue == 200 & newLab %in% c('T1', 'T4')]
outDtInf[TCSValue == 200 & newLab %in% c('T1', 'T4')][, .N, by = list(Animal, newLAb)]
outDtInf[TCSValue == 200 & newLab %in% c('T1', 'T4')][, .N, by = list(Animal, newLab)]
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
outDtInf = applyInfInd(infIndOut$PCA, outDt[TCSValue == 200])
outDtInf = outDtInf[complete.cases(outDtInf)]
outDtInf[grepl('T1', Treatment), newLab := 'T1']
outDtInf[grepl('T2', Treatment), newLab := 'T2']
outDtInf[grepl('T4', Treatment), newLab := 'T4']
animalsToUse = outDtInf[order(Animal) & newLab %in% c('T1', 'T4'), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]$Animal
animalsToUse
cleanData = outDtInf[Animal %in% animalsToUse & newLab %in% c('T1', 'T4') & InfInd > -330]
cleanData
cleanData = outDtInf[Animal %in% animalsToUse & newLab %in% c('T1', 'T4')]
cleanData
plot(cleanData$InfInd)
cleanData = outDtInf[Animal %in% animalsToUse & newLab %in% c('T1', 'T4') & InfInd > -2000]
plot(cleanData$InfInd)
anova(lme(InfInd ~ Treatment, data = cleanData, random = ~1|Animal))
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar')
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') + geom_point()
ggplot(data = cleanData, aes(x = newLab, y = InfInd, col = Animal)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') + geom_point()
ggplot(data = cleanData, aes(x = newLab, y = InfInd, col = Animal)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') + geom_point() + facet_wrap(.~Animal)
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point()
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(data = cleanData, aes(x = newLab, y = InfInd), fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point()
ggplot(data = cleanData, aes(x = newLab, y = InfInd, col = Animal)) +
stat_summary(data = cleanData, aes(x = newLab, y = InfInd), fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point()
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point(data = cleanData, aes(x = newLab, y = InfInd, col = Animal))
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point(data = cleanData, aes(x = newLab, y = InfInd, col = Animal), position = jitter_dodge())
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point(data = cleanData, aes(x = newLab, y = InfInd, col = Animal), position = position_jitterdodge())
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point(data = cleanData, aes(x = newLab, y = InfInd, col = Animal))
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point(data = cleanData, aes(x = newLab, y = InfInd, col = Animal), size = 5)
ggplot(data = cleanData, aes(x = newLab, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - 2*sd(x), fun.max = function(x) mean(x) + 2*sd(x), geom = 'crossbar') +
geom_point(data = cleanData, aes(x = newLab, y = InfInd, col = Animal), size = 5) + facet_wrap(.~Animal)
cleanData[, list(mean(InfInd), sd(InfInd)), by = newLab]
anova(lme(InfInd ~ Treatment, data = cleanData, random = ~1|Animal))
cleanData[, .N, by = newLab]
cleanData[, .N, by = list(newLab, Animal)]
cleanData[, .N, by = list(newLab, Animal)][, .N, by = newLab]
require(devtools)
