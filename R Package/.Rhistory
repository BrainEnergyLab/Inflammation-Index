treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
##### Grab our training data
# If we're on mac, set the path to dropbox as in /Users/Devin/ and the github
# path as in /Users/Devin/Documents else set dropPath in windows to E:/
if(.Platform$OS.type == "unix") {
dropPath = file.path("", "Users", "devin.clarke")
gitPath = file.path("", "Users", "devin.clarke", "Documents")
} else if (.Platform$OS.type == "windows") {
dropPath = file.path("E:")
}
# Add on the dropbox file structure to dropPath
dropPath = file.path(dropPath, "Dropbox (Brain Energy Lab)", "Everything")
# Here we source our dependent functions, PCACleanCols and get Results
functionsDir =
file.path('/Users/devin.clarke/Documents/GitHub', "ThesisCode", "Microglia-Analysis",
"MicrogliaMorphologyAnalysis Functions")
# If it's not sourced, source the function for binning a vector and getting
# out our info for each animal i.e. diet, sex, age etc.
find = c("microMorphBoundWeights")
locations =
c(file.path(functionsDir,"microMorphBoundWeights.R"))
for(index in 1:length(find)) {
if(!exists(find[index])) {
source(locations[index])
}
}
rm("find", "locations")
inVivoInfoFile = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoMouseInfo.csv")
inVivoWeightsLog = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoWeightsLog.csv")
boundWeights = microMorphBoundWeights(inVivoInfoFile, inVivoWeightsLog)
# Set the arguments needed for the preprocessing data
pixelSize = 0.58
morphologyWDSelection = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Output")
animalIDs = unique(boundWeights$Animal)
treatmentIDs = as.character(unique(boundWeights$Timepoint))
treatmentIDs = treatmentIDs[is.na(treatmentIDs)==F]
LPSGroups = c("D56", "LPS")
useFrac = T
otherExclusions = list("Col" = "Diet", "Cond" = "Control")
altMorphSelection = "/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Storage/Choice April 2019/Output"
## Train on LPS Data without HFD cells
lps_comp_data =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = altMorphSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
lps_to_save = lps_comp_data[(Treatment != 'D1')]
correctCellNo <- function(inputDT) {
output_to_save = copy(inputDT)
cellNames = sapply(output_to_save$UniqueID, function(x) {
temp = substring(x, gregexpr('CANDIDATE', x))
substring(temp, 1, gregexpr('Y', temp)[[1]][1]+3)
})
uniqueCells = as.data.table(unique(cellNames))
uniqueCells[, CellNo := seq(1:nrow(uniqueCells))]
output_to_save[, MaskNames := cellNames]
setkey(uniqueCells, V1)
output_to_save[, CellNo := NULL]
setkey(output_to_save, MaskNames)
output_to_save[uniqueCells, CellNo := CellNo]
output_to_save[, MaskNames := NULL]
return(output_to_save)
}
lps_to_save = correctCellNo(lps_to_save)
trainDataRaw = merge(lps_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
trainData = trainDataRaw[Diet == 'Control']
labCols = c(c("Animal", "CellNo", "TCSValue", "Treatment", "UniqueID"), otherExclusions$Col)
setnames(trainData, old = 'TCS', new = 'TCSValue', skip_absent = T)
infIndOut = constructInfInd(procDat = trainData, labCols = labCols)
##### Apply to our test data
indexMetrics = rownames(infIndOut$PCA$rotation)
setnames(testData,
old = c('MaximumNumberofIntersections', 'MaxIntersectionRadius', 'RamificationIndex(sampled)', 'CriticalRadius'),
new = c('Maxinters.', 'Maxinters.radius', 'Ramificationindex(sampled)', 'Criticalradius'),
skip_absent = T
)
trainLabelled = applyInfInd(infIndOut$PCA, trainData[TCSValue == infIndOut$`Optimal TCS`])
testLabelled = applyInfInd(infIndOut$PCA, testData[TCSValue == infIndOut$`Optimal TCS`])
plot(testLabelled$InfInd)
require(devtools)
load_all()
##### Grab our testing data
# Specify our image storage and working directory for our LPS training data
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Image Storage Directory'
workingDir = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
# Collate our  data
testData = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
##### Grab our training data
# If we're on mac, set the path to dropbox as in /Users/Devin/ and the github
# path as in /Users/Devin/Documents else set dropPath in windows to E:/
if(.Platform$OS.type == "unix") {
dropPath = file.path("", "Users", "devin.clarke")
gitPath = file.path("", "Users", "devin.clarke", "Documents")
} else if (.Platform$OS.type == "windows") {
dropPath = file.path("E:")
}
# Add on the dropbox file structure to dropPath
dropPath = file.path(dropPath, "Dropbox (Brain Energy Lab)", "Everything")
# Here we source our dependent functions, PCACleanCols and get Results
functionsDir =
file.path('/Users/devin.clarke/Documents/GitHub', "ThesisCode", "Microglia-Analysis",
"MicrogliaMorphologyAnalysis Functions")
# If it's not sourced, source the function for binning a vector and getting
# out our info for each animal i.e. diet, sex, age etc.
find = c("microMorphBoundWeights")
locations =
c(file.path(functionsDir,"microMorphBoundWeights.R"))
for(index in 1:length(find)) {
if(!exists(find[index])) {
source(locations[index])
}
}
rm("find", "locations")
inVivoInfoFile = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoMouseInfo.csv")
inVivoWeightsLog = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoWeightsLog.csv")
boundWeights = microMorphBoundWeights(inVivoInfoFile, inVivoWeightsLog)
# Set the arguments needed for the preprocessing data
pixelSize = 0.58
morphologyWDSelection = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Output")
animalIDs = unique(boundWeights$Animal)
treatmentIDs = as.character(unique(boundWeights$Timepoint))
treatmentIDs = treatmentIDs[is.na(treatmentIDs)==F]
LPSGroups = c("D56", "LPS")
useFrac = T
otherExclusions = list("Col" = "Diet", "Cond" = "Control")
altMorphSelection = "/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Storage/Choice April 2019/Output"
## Train on LPS Data without HFD cells
lps_comp_data =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = altMorphSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
lps_to_save = lps_comp_data[(Treatment != 'D1')]
correctCellNo <- function(inputDT) {
output_to_save = copy(inputDT)
cellNames = sapply(output_to_save$UniqueID, function(x) {
temp = substring(x, gregexpr('CANDIDATE', x))
substring(temp, 1, gregexpr('Y', temp)[[1]][1]+3)
})
uniqueCells = as.data.table(unique(cellNames))
uniqueCells[, CellNo := seq(1:nrow(uniqueCells))]
output_to_save[, MaskNames := cellNames]
setkey(uniqueCells, V1)
output_to_save[, CellNo := NULL]
setkey(output_to_save, MaskNames)
output_to_save[uniqueCells, CellNo := CellNo]
output_to_save[, MaskNames := NULL]
return(output_to_save)
}
lps_to_save = correctCellNo(lps_to_save)
trainDataRaw = merge(lps_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
trainData = trainDataRaw[Diet == 'Control']
labCols = c(c("Animal", "CellNo", "TCSValue", "Treatment", "UniqueID"), otherExclusions$Col)
setnames(trainData, old = 'TCS', new = 'TCSValue', skip_absent = T)
infIndOut = constructInfInd(procDat = trainData, labCols = labCols)
##### Apply to our test data
indexMetrics = rownames(infIndOut$PCA$rotation)
setnames(testData,
old = c('MaximumNumberofIntersections', 'MaxIntersectionRadius', 'RamificationIndex(sampled)', 'CriticalRadius'),
new = c('Maxinters.', 'Maxinters.radius', 'Ramificationindex(sampled)', 'Criticalradius'),
skip_absent = T
)
trainLabelled = applyInfInd(infIndOut$PCA, trainData[TCSValue == infIndOut$`Optimal TCS`])
testLabelled = applyInfInd(infIndOut$PCA, testData[TCSValue == infIndOut$`Optimal TCS`])
unique(testLabelled$Animal)
grepl('2017_29_06|2017_28_06', unique(testLabelled$Animal))
unique(testLabelled$Animal)[grepl('2017_29_06|2017_28_06', unique(testLabelled$Animal))]
testLabelled[grepl('2017_05_07|2017_04_07', Animal), Condition := 'WT']
testLabelled[grepl('2017_29_06|2017_28_06', Animal), Condition := 'KO']
unique(testLabelled$Condition)
ggplot(data = testLabelled, aes(x = Condition, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar')
require(ggplot2)
ggplot(data = testLabelled, aes(x = Condition, y = InfInd)) + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar')
anova(aov(InfInd ~ Condition, data = testLabelled))
unique(testLabelled$Animal)
trainLabelled[, mean(InfInd), by = Treatment]
# Specify our image storage and working directory for our LPS training data
motImageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
motLPSworkingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/LPS Working Directory/Output'
motAnimalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = motImageStorageDirectory)
# Collate our lPS data
LPSMot = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = motLPSworkingDirectory,
animalIDs = motAnimalTreatmentIDs$animalIDs,
treatmentIDs = motAnimalTreatmentIDs$treatmentIDs,
useFrac = T
)
# Clean it up
LPSMot = LPSMot[Treatment != 'LPS T1', Treatment := 'D56 T1']
MotLPSGroups = c('LPS T1', 'D56 T1')
# Get a vector of animal IDs that have only had control diet treatment
controlIDs = c("BK1L", "BR1R", "BT1L", "BU1L1R", "BX1R", "CE1L", "CE1R",  "CW2R",  "DARTH","SNOKE")
# Filter our data to only include control animals
inDat = LPSMot[Treatment %in% LPSGroups & Animal %in% controlIDs]
# Use the AUC method to construct an inflammation index on this dataset
method = 'AUC'
motInfIndOut =
constructInfInd(procDat = inDat,
method = method)
setnames(LPSMot, old = 'TCS', new = 'TCSValue', skip_absent = T)
# Use the AUC method to construct an inflammation index on this dataset
method = 'AUC'
motInfIndOut =
constructInfInd(procDat = inDat,
method = method)
inDat = LPSMot[Treatment %in% LPSGroups & Animal %in% controlIDs]
# Use the AUC method to construct an inflammation index on this dataset
method = 'AUC'
motInfIndOut =
constructInfInd(procDat = inDat,
method = method)
names(inDat)
# Collate our lPS data
LPSMot = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = motLPSworkingDirectory,
animalIDs = motAnimalTreatmentIDs$animalIDs,
treatmentIDs = motAnimalTreatmentIDs$treatmentIDs,
useFrac = T
)
names(LPSMot)
# Clean it up
LPSMot = LPSMot[Treatment != 'LPS T1', Treatment := 'D56 T1']
MotLPSGroups = c('LPS T1', 'D56 T1')
# Get a vector of animal IDs that have only had control diet treatment
controlIDs = c("BK1L", "BR1R", "BT1L", "BU1L1R", "BX1R", "CE1L", "CE1R",  "CW2R",  "DARTH","SNOKE")
# Filter our data to only include control animals
inDat = LPSMot[Treatment %in% LPSGroups & Animal %in% controlIDs]
names(inDat)
# Use the AUC method to construct an inflammation index on this dataset
method = 'AUC'
motInfIndOut =
constructInfInd(procDat = inDat,
method = method)
load_all()
# Use the AUC method to construct an inflammation index on this dataset
method = 'AUC'
motInfIndOut =
constructInfInd(procDat = inDat,
method = method)
forComp
# Clean it up
lpsData = copy(LPSMot)
lpsData[Treatment != 'LPS T1', Treatment := 'D56 T1']
LPSGroups = c('LPS T1', 'D56 T1')
# Get a vector of animal IDs that have only had control diet treatment
controlIDs = c("BK1L", "BR1R", "BT1L", "BU1L1R", "BX1R", "CE1L", "CE1R",  "CW2R",  "DARTH","SNOKE")
# Filter our data to only include control animals
inDat = lpsData[Treatment %in% LPSGroups & Animal %in% controlIDs]
# Use the AUC method to construct an inflammation index on this dataset
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = method)
MotinfIndOut =
constructInfInd(procDat = inDat,
method = method)
motTrainLabelled = applyInfInd(MotinfIndOut$PCA, inDat[TCSValue == MotinfIndOut$`Optimal TCS`])
testLabelled
testLabelled[, .N, by = Condition]
strsplit('_', unique(testLabelled$Animal)[1])[-1]
strsplit('_', unique(testLabelled$Animal)[1])
unique(testLabelled$Animal)[1]
strsplit(unique(testLabelled$Animal)[1], '_')
strsplit(unique(testLabelled$Animal)[1], '_')[-1]
tail(strsplit(unique(testLabelled$Animal)[1], '_'), n = 1)
tail(strsplit(unique(testLabelled$Animal)[1], '_')[[1]], n = 1)
testLabelled[, Cell := tail(strsplit(Animal, '_')[[1]], n = 1)]
testLabelled
testLabelled[, Field := tail(strsplit(Animal, '_')[[1]], n = 2)]
testLabelled[, Field := tail(strsplit(Animal, '_')[[1]])[1:2]]
testLabelled[, Field := tail(strsplit(Animal, '_')[[1]])[2]]
testLabelled
testLabelled[, Cell := tail(strsplit(Animal, '_')[[1]], n = 1)]
testLabelled
tail(strsplit(unique(testLabelled$Animal)[1], '_')[[1]], n = 1)
sapply(testLabelled$Animal, function(x) strsplit(x, '_')[[1]], n = 1)
sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 1))
sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 2))
sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 2)[2])
sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 2)[1])
testLabelled[grepl('2017_29_06|2017_28_06', Animal), Condition := 'KO']
testLabelled$Cell = sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 1))
testLabelled$Field = sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 2)[1])
testLabelled
unique(testLabelled[, list(Condition, Cell)])
unique(testLabelled[, list(Condition, Cell, Field)])
testLabelled[, CellID := paste(Condition, Cell, sep = '-')]
testLabelled
ggplot(data = testLabelled, aes(x = Condition, y = InfInd)) + geom_point() + facet_wrap(~.CellID)
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = CellID)) + geom_point() + facet_wrap(~.CellID)
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = CellID)) + geom_point() + facet_wrap(~CellID)
anova(aov(InfInd ~ Condition, data = testLabelled))
testLabelled[, mean(InfInd), by = Condition]
testLabelled[complete.cases(InfInd), mean(InfInd), by = Condition]
anova(aov(InfInd ~ Condition, data = testLabelled[complete.cases(InfInd)]))
testLabelled[Condition == 'WT']
testLabelled[Condition == 'WT' & InfInd %between% c(3, 4)]
testLabelled[Condition == 'KO' & InfInd %between% c(4, 5)]
testLabelled[Condition == 'WT' & InfInd %between% c(3, 4)]
testLabelled[Condition == 'WT' & InfInd %between% c(3, 4)][2]
testLabelled[Condition == 'KO']
testLabelled[Condition == 'KO'& order(InfInd)]
testLabelled[Condition == 'KO'& order(InfInd) & complete.cases(InfInd)]
testLabelled[Condition == 'KO'& complete.cases(InfInd)][order(InfInd)]
testLabelled[Condition == 'WT'& complete.cases(InfInd)][order(InfInd)]
testLabelled[complete.cases(InfInd), mean(InfInd), by = Condition]
testLabelled[complete.cases(InfInd), list(mean(InfInd), sd(InfInd)), by = Condition]
anova(aov(InfInd ~ Condition, data = testLabelled))
trainData$Treatment
testOpt = applyInfInd(infIndOut$PCA, testData[TCSValue == infIndOut$`Optimal TCS`])
testOpt[grepl('2017_05_07|2017_04_07', Animal), Treatment := 'WT']
testOpt[grepl('2017_29_06|2017_28_06', Animal), Treatment := 'KO']
labCols
names(testOpt)
testOpt = copy(testData)
testOpt[grepl('2017_05_07|2017_04_07', Animal), Treatment := 'WT']
testOpt[grepl('2017_29_06|2017_28_06', Animal), Treatment := 'KO']
names(testOpt)
testOptInfInd = constructInfInd(procDat = testOpt)
testOptInfInd = constructInfInd(procDat = testOpt, method = 'p value')
testOptInfIndAUC = constructInfInd(procDat = testOpt, method = 'AUC')
testOptInfIndP = constructInfInd(procDat = testOpt, method = 'p value')
anova(aov(InfInd ~ Treatment, data = testOptInfIndAUC))
testOptAUC = applyInfInd(testOptInfIndAUC$PCA, testOpt[TCSValue == testOptInfIndAUC$`Optimal TCS`])
testOptP = applyInfInd(testOptInfIndP$PCA, testOpt[TCSValue == testOptInfIndP$`Optimal TCS`])
anova(aov(InfInd ~ Treatment, data = testOptAUC))
anova(aov(InfInd ~ Treatment, data = testOptP))
testOptInfIndAUC$`Metric Correlations`
names(testOptInfIndAUC$`Metric Correlations`)
rownames(testOptInfIndAUC$`Metric Correlations`)
testOpt[, rownames(testOptInfIndAUC$`Metric Correlations`), with = F]
testOpt[, c('Animal', 'Treatment', 'InfInd', rownames(testOptInfIndAUC$`Metric Correlations`)), with = F]
testOptAUC[, c('Animal', 'Treatment', 'InfInd', rownames(testOptInfIndAUC$`Metric Correlations`)), with = F]
plot(testOptAUC[, c('Animal', 'Treatment', 'InfInd', rownames(testOptInfIndAUC$`Metric Correlations`)), with = F])
testOptAUC[, c('Animal', 'Treatment', 'InfInd', rownames(testOptInfIndAUC$`Metric Correlations`)), with = F]
inputsAUCDT = testOptAUC[, c('Animal', 'Treatment', 'InfInd', rownames(testOptInfIndAUC$`Metric Correlations`)), with = F]
gather(inputsAUCDT, Parameter, Value, c('InfInd', rownames(testOptInfIndAUC$`Metric Correlations`)))
gatheredDT = as.data.table(gather(inputsAUCDT, Parameter, Value, c('InfInd', rownames(testOptInfIndAUC$`Metric Correlations`))))
gatheredDT[, mean(Value), by = list(Parameter, Treatment)]
spread(gatheredDT[, mean(Value), by = list(Parameter, Treatment)], Treatment, V1)
anova(aov(InfInd ~ Treatment, data = testOptAUC))
anova(aov(InfInd ~ Condition, data = testLabelled))
ggplot(data = testLabelled, aes(x = Condition, y = InfInd)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw()
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condiotion)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw()
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw()
ggplot(data = testLabelled, aes(x = Condition, y = InfInd)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
require(RColorBrewer)
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2")
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Accent")
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2")
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2")
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
# Grouped by timepoint
attwellCompPlot = ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
# Save it
ggsave(filename = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Figures/fig5attwellComparison.pdf',
plot = attwellCompPlot,
device = 'pdf')
testLabelled
testLabelled = applyInfInd(infIndOut$PCA, testData[TCSValue == infIndOut$`Optimal TCS`])
testLabelled[grepl('2017_05_07|2017_04_07', Animal), Condition := 'WT']
testLabelled[grepl('2017_29_06|2017_28_06', Animal), Condition := 'KO']
#testLabelled$Cell = sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 1))
#testLabelled$Field = sapply(testLabelled$Animal, function(x) tail(strsplit(x, '_')[[1]], n = 2)[1])
anova(aov(InfInd ~ Condition, data = testLabelled))
testLabelled[complete.cases(InfInd), mean(InfInd), by = Condition]
require(RColorBrewer)
require(ggplot2)
# Grouped by timepoint
attwellCompPlot = ggplot(data = testLabelled, aes(x = Condition, y = InfInd, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
attwellCompPlot
testLabelled
testLabelled = applyInfInd(infIndOut$PCA, testData[TCSValue == infIndOut$`Optimal TCS`])
testLabelled[grepl('2017_05_07|2017_04_07', Animal), Treatment := 'WT']
testLabelled[grepl('2017_29_06|2017_28_06', Animal), Treatment := 'KO']
anova(aov(InfInd ~ Treatment, data = testLabelled))
testLabelled[complete.cases(InfInd), mean(InfInd), by = Treatment]
ggplot(data = testLabelled, aes(x = Condition, y = Treatment, col = Condition)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = testLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
testLabelled
testLabelled[complete.cases(InfInd), c('TCSValue', 'UniqueID') := NULL]
toWriteAtt = copy(testLabelled)
toWriteAtt[, c('TCSValue', 'UniqueID') := NULL]
toWriteAtt
toWriteAtt[complete.cases(InfInd)]
toWriteAtt = copy(testLabelled)
toWriteAtt[, c('TCSValue', 'UniqueID') := NULL]
fwrite(toWriteAtt[complete.cases(InfInd)],
file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig5attwelldata.csv')
ggplot(data = testLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(size = 3) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2")
testLabelled[Condition == 'WT' & InfInd %between% c(3, 4)][2]
testLabelled[Treatment == 'WT' & InfInd %between% c(3, 4)][2]
testLabelled[Treatment == 'WT' & InfInd %between% c(3, 4)]
testLabelled[Treatment == 'WT' & InfInd %between% c(3, 4)][2]
testLabelled[Treatment == 'KO' & InfInd %between% c(4, 5)][3]
testLabelled[Treatment == 'KO' & InfInd %between% c(4, 5)]
testLabelled[Treatment == 'KO' & InfInd %between% c(4, 5)][3]
testLabelled[Treatment == 'KO' & InfInd %between% c(4, 5)]
testLabelled[Treatment == 'KO']
testLabelled[Treatment == 'KO' & complete.cases(InfInd)]
tail(testLabelled[Treatment == 'KO' & complete.cases(InfInd)], n = 1)
tail(testLabelled[Treatment == 'WT' & complete.cases(InfInd)], n = 1)
spread(gatheredDT[, mean(Value), by = list(Parameter, Treatment)], Treatment, V1)
toWriteAtt[Treatment == 'WT']
toWriteAtt[Treatment == 'KO']
spread(gatheredDT[, mean(Value), by = list(Parameter, Treatment)], Treatment, V1)
spread(gatheredDT[, round(mean(Value),2), by = list(Parameter, Treatment)], Treatment, V1)
fwrite(featuresTable,
file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig5featurestable.csv')
featuresTable = spread(gatheredDT[, mean(Value), by = list(Parameter, Treatment)], Treatment, V1)
fwrite(featuresTable,
file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig5featurestable.csv')
featuresTable = spread(gatheredDT[, round(mean(Value),2), by = list(Parameter, Treatment)], Treatment, V1)
fwrite(featuresTable,
file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig5featurestable.csv')
testLabelled[complete.cases(InfInd), mean(InfInd), by = Treatment]
testLabelled[complete.cases(InfInd), list(mean(InfInd), sd(InfInd)), by = Treatment]
testLabelled[complete.cases(InfInd), .N, by = Treatment]
featuresTable
anova(aov(SomaSize ~ Treatment, data = testLabelled)
)
