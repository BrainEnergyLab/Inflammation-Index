fwrite(infIndPlotting[Vals == 5], file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig3Amasksizerevision.csv')
tcs_comp = ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_tcs_comp_initial_inf_ind.pdf", plot = tcs_comp, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
desc_comp_no_annotations = ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(Vals)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_no_desc_comp_initial_inf_ind_no_annotations.pdf", plot = desc_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
tcs_comp_no_annotations = ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_tcs_comp_initial_inf_ind_no_annotations.pdf", plot = tcs_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
fwrite(infIndPlotting[Vals == 5], file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig3Amasksizerevision.csv')
unique(infIndPlotting[Vals == 5]$TCS)
ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(Vals)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
desc_comp = ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd)) +
geom_point(position = position_jitterdodge(), alpha = 0.5, shape = 21, size  = 4, aes(col = Treatment)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment, col = Treatment), alpha = 0.3)+
facet_grid(cols = vars(Vals)) +
theme_bw() + ylab('Preliminary Inflammation Index') +
theme(legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_no_desc_comp_initial_inf_ind.pdf", plot = desc_comp, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 200, height = 100, units = "mm")
desc_comp_no_annotations = ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(Vals)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_no_desc_comp_initial_inf_ind_no_annotations.pdf", plot = desc_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
document()
require(devtools)
load_all()
# Specify our image storage and working directory for our LPS training data
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Image Storage/'
LPSworkingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalTreatmentIDs
# Specify our image storage and working directory for our LPS training data
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Image Storage'
workingDir = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalTreatmentIds
animalTreatmentIDs
imageStorageDirectory
subFolders = list.dirs(path = imageStorageDirectory, full.names = F)
subFolders
imageStorageDirectory
dir.exists(imageStorageDirectory)
file.exists(imageStorageDirectory)
dir.exists("/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Image Storage/")
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Image Storage Directory'
workingDir = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalTreatmentIDs
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
dataOut
dataOut
dir.exists('/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Working Directory/Output')
load_all()
load_all()
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
load_all()
require(devtools)
load_all()
require(devtools)
load_all()
?getAnimalAndTreatmentIDs
document()
?morphPreProcessing
load_all()
load_all()
document()
load_all()
load_all()
document()
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Image Storage Directory'
workingDir = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Attwell Data/Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
animalTreatmentIDs
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
passList$`Cell Parameters`
passList$`Cell Parameters`$Locations
comboList$`Cell Parameters`$Files
comboList$`Sholl Parameters`$Files
mapList$`Cell Parameters`$Files
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
cleanList$`Cell Parameters`$Files
with_id$`Cell Parameters`$Files
common_data$`Cell Parameters`$Files
load_all()
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
with_id$`Cell Parameters`$Files
uniqueIDList$`Cell Parameters`
Intersections
uniqueIDList$FracLac
uniqueIDList$`Hull and Circularity`
uniqueIDList$FracLac
with_id$`Hull and Circularity`$Files
with_id$FracLac$Files
load_all()
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
passList$FracLac$Locations
comboList$FracLac$Files
mapList$FracLac$Files
mapList$FracLac$Files
mapList$`Hull and Circularity`$Files
comboList$FracLac$Files
load_all()
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
mapList$FracLac$Files
unique(mapList$FracLac$Files$Animal)
unique(mapList$`Hull and Circularity`$Files$Animal)
unique(mapList$`Hull and Circularity`$Files$Treatment)
unique(mapList$FracLac$Files$Animal)
unique(mapList$FracLac$Files$Treatment)
load_all()
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
storageList$FracLac$Files
storageList$FracLac$Files
formatFracLacFiles(storageList$FracLac$Files)
fracLacComboList$Location
load_all()
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
storageList$FracLac$Files$Location
fracLacComboList$Location
test = fracLacComboList$Location[1]
test
strsplit(as.character(test), "_")
strsplit(as.character(test), "Ş")
load_all()
# Collate our lPS data
dataOut = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
dataOut
dataOut
dataOut[TCSValue == 400]
# path as in /Users/Devin/Documents else set dropPath in windows to E:/
if(.Platform$OS.type == "unix") {
dropPath = file.path("", "Users", "devin.clarke")
gitPath = file.path("", "Users", "devin.clarke", "Documents")
} else if (.Platform$OS.type == "windows") {
dropPath = file.path("E:")
}
# Add on the dropbox file structure to dropPath
dropPath = file.path(dropPath, "Dropbox (Brain Energy Lab)", "Everything")
# Here we source our dependent functions, PCACleanCols and get Results
functionsDir =
file.path('/Users/devin.clarke/Documents/GitHub', "ThesisCode", "Microglia-Analysis",
"MicrogliaMorphologyAnalysis Functions")
# If it's not sourced, source the function for binning a vector and getting
# out our info for each animal i.e. diet, sex, age etc.
find = c("microMorphBoundWeights")
locations =
c(file.path(functionsDir,"microMorphBoundWeights.R"))
for(index in 1:length(find)) {
if(!exists(find[index])) {
source(locations[index])
}
}
rm("find", "locations")
inVivoInfoFile = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoMouseInfo.csv")
inVivoWeightsLog = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoWeightsLog.csv")
boundWeights = microMorphBoundWeights(inVivoInfoFile, inVivoWeightsLog)
# Set the arguments needed for the preprocessing data
pixelSize = 0.58
morphologyWDSelection = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Output")
animalIDs = unique(boundWeights$Animal)
treatmentIDs = as.character(unique(boundWeights$Timepoint))
treatmentIDs = treatmentIDs[is.na(treatmentIDs)==F]
LPSGroups = c("D56", "LPS")
useFrac = T
otherExclusions = list("Col" = "Diet", "Cond" = "Control")
method = "p value"
altMorphSelection = "/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Storage/Choice April 2019/Output"
## Train on LPS Data without HFD cells
lps_comp_data =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = altMorphSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
lps_comp_data
lps_comp_data
output =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = morphologyWDSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
output$Treatment
unique(output$Treatment)
output_to_save = output[Treatment == 'D56']
lps_to_save = lps_comp_data[(Treatment != 'D1')]
unique(lps_to_save$Treatment)
unique(lps_to_save$TCS)
unique(output_to_save$TCS)
correctCellNo <- function(inputDT) {
output_to_save = copy(inputDT)
cellNames = sapply(output_to_save$UniqueID, function(x) {
temp = substring(x, gregexpr('CANDIDATE', x))
substring(temp, 1, gregexpr('Y', temp)[[1]][1]+3)
})
uniqueCells = as.data.table(unique(cellNames))
uniqueCells[, CellNo := seq(1:nrow(uniqueCells))]
output_to_save[, MaskNames := cellNames]
setkey(uniqueCells, V1)
output_to_save[, CellNo := NULL]
setkey(output_to_save, MaskNames)
output_to_save[uniqueCells, CellNo := CellNo]
output_to_save[, MaskNames := NULL]
return(output_to_save)
}
output_to_save = correctCellNo(output_to_save)
lps_to_save = correctCellNo(lps_to_save)
toPass = merge(output_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
toPassTrain = merge(lps_comp_data, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
testData = merge(output_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
testData
trainData = merge(lps_comp_data, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
unique(trainData$Treatment)
trainData = merge(lps_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
unique(trainData$Treatment)
unique(trainData$Diet)
trainDataRaw = merge(lps_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
trainData = trainDataRaw[Diet == 'Control']
labCols =
labCols = c(c("Animal", "CellNo", "TCS", "Treatment", "UniqueID"), otherExclusions$Col)
tableOut = list()
PCAOut = list()
dataOut = list()
addIndex = 1
noDesc = 1:15
# For each TCS value we have in our training data
for(currTCS in unique(trainData$TCS)) {
PCAOut[[currTCS]] = list()
# Get out gathered data for this TCS value
aggData = formatROCRInput(copy(trainData[TCS == currTCS]), labCols)
# Get out AUC values for every metric in our gathered data
ROCList = list()
for(currMetric in unique(aggData$Parameter)) {
ROCList[[currMetric]] = getROCValues(aggData, currMetric)
ROCList[[currMetric]]$Parameter = currMetric
}
paramByAuc = rbindlist(ROCList)
# Loop through whether we're using the 1st, 1st+2nd, 1st+2nd+3rd etc. best discriminators
for(howMany in noDesc) {
# Get the PCA of our inflammation index, and a table of evaluation metrics
infIndices = createEvaluateInfIndex(paramByAuc, howMany, method = 'AUC', aggData, labCols, 0.9)
spreadDat = as.data.table(spread(aggData, Parameter, Value))
spreadDat[, InfInd := predict(infIndices$PCAOut, newdata = spreadDat)[,1]]
spreadDat[, TCS := currTCS]
spreadDat[, Vals := howMany]
dataOut[[addIndex]] = spreadDat
# Return our inflammation index PCA and pval and AUC values
PCAOut[[currTCS]][[howMany]] = infIndices$PCAOut
tableOut[[addIndex]] = infIndices$tableOut
tableOut[[addIndex]][, TCS := currTCS]
tableOut[[addIndex]][, Vals := howMany]
tableOut[[addIndex]][, Metrics := paste(infIndices$chosenMetrics, collapse = ",")]
addIndex = addIndex+1
}
}
# Combine our tableOut tables into a single data.table
forComp = unique(rbindlist(tableOut))
forComp[which.max(forComp$AUC)]
infIndPlotting = rbindlist(dataOut)
ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
require(ggplot)
require(ggplot2)
ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd)) +
geom_point(position = position_jitterdodge(), alpha = 0.5, shape = 21, size  = 4, aes(col = Treatment)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment, col = Treatment), alpha = 0.3)+
facet_grid(cols = vars(Vals)) +
theme_bw() + ylab('Preliminary Inflammation Index') +
theme(legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_no_desc_comp_initial_inf_ind.pdf", plot = desc_comp, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 200, height = 100, units = "mm")
infIndOut = constructInfInd(procDat = trainData)
labCols
infIndOut = constructInfInd(procDat = trainData, labCols = labCols)
labCols =
labCols = c(c("Animal", "CellNo", "TCSValue", "Treatment", "UniqueID"), otherExclusions$Col)
infIndOut = constructInfInd(procDat = trainData, labCols = labCols)
trainData
trainData$TCS
?constructInfInd
names(trainData)
constructInfInd(procDat = trainData, labCols = labCols)
load_all()
constructInfInd(procDat = trainData, labCols = labCols)
forComp
names(procDat)
grepl('TCSValue', names(procDat))
grep('TCSValue', names(procDat))
grep('TCSValue', names(procDat)) == 0
length(grep('TCSValue', names(procDat))) == 0
load_all()
constructInfInd(procDat = trainData, labCols = labCols)
?warning
load_all()
constructInfInd(procDat = trainData, labCols = labCols)
load_all()
constructInfInd(procDat = trainData, labCols = labCols)
?except
?errorCondition
setnames(trainData, old = 'TCS', new = 'TCSValue', skip_absent = T)
labCols = c(c("Animal", "CellNo", "TCSValue", "Treatment", "UniqueID"), otherExclusions$Col)
infIndOut = constructInfInd(procDat = trainData, labCols = labCols)
load_all()
infIndOut = constructInfInd(procDat = trainData, labCols = labCols)
# Collate our  data
testData = morphPreProcessing(
pixelSize = 0.39,
morphologyWD = workingDir,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
testData[TCs == 500]
testData[TCS == 500]
testData[TCSValue == 500]
testLabelled = applyInfInd(infIndOut$PCA, testData[TCSValue == 500])
infIndOut$PCA$x
infIndOut$PCA$rotation
rownames(infIndOut$PCA$rotation)
indexMetrics = rownames(infIndOut$PCA$rotation)
names(testData)
Intersect(names(testData), indexMetrics)
?intersect
Intersect(names(testData), indexMetrics)
intersect(names(testData), indexMetrics)
indexMetrics[!intersect(names(testData), indexMetrics)]
indexMetrics[!grepl(intersect(names(testData), indexMetrics), indexMetrics)]
indexMetrics[!grepl(paste(intersect(names(testData), indexMetrics), collapse = '|'), indexMetrics)]
indexMetrics
setnames(testData,
old = c('MaximumNumberofIntersections', 'MaxIntersectionRadius', 'RamificationIndex(sampled)', 'CriticalRadius'),
new = c('Maxinters.', 'Maxinters.radius', 'Ramificationindex(sampled)', 'Criticalradius'),
skip_absent = T
)
testLabelled = applyInfInd(infIndOut$PCA, testData[TCSValue == 500])
testLabelled
testLabelled
testLabelled[complete.cases(InfInd)]
ggplot(data = testLabelled[complete.cases(InfInd)], aes(y = InfInd))
ggplot(data = testLabelled[complete.cases(InfInd)], aes(y = InfInd)) + geom_point()
plot(testLabelled[complete.cases(InfInd)]$InfInd)
length(unique(testLabelled[complete.cases(InfInd)]$CellNo))
infIndOut$`Metric Correlations`
load_all()
document()
document9
document()
load_all()
infIndOut = constructInfInd(procDat = trainData, labCols = labCols)
testLabelled = applyInfInd(infIndOut$PCA, testData[TCSValue == infIndOut$`Optimal TCS`])
plot(testLabelled$InfInd)
trainLabelled = applyInfInd(infIndOut$PCA, trainData[TCSValue == infIndOut$`Optimal TCS`])
ggplot(data = trainLabelled, aes(x = Treatment, y = InfInd)) + geom_point()
ggplot(data = trainLabelled, aes(x = Treatment, y = InfInd)) + geom_point() + stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar')
anova(aov(InfInd ~ Treatment, data = trainLabelled))
summary(trainLabelled)
