labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
PCOut = constructInfInd(procDat[TCSValue == 400], method = 'AUC',
labCols = c('Animal', 'CellNo', 'TCSValue', 'Treatment', 'UniqueID', 'Diet'),
)
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
applyTo
procDatInf = applyInfInd(PCAOut[[500]][[2]], procDat[TCS == 400])
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
procDatInf = applyInfInd(PCAOut[[500]][[2]], procDat[TCSValue == 400])
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
cleaned = toPass[Treatment == 'D56']
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index)
anova(tMod)
with_inf_index = applyInfInd(PCAOut[[400]][[4]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index)
anova(tMod)
forComp
which.max(forComp$AUC)
forComp[which.max(forComp$AUC)]
with_inf_index = applyInfInd(PCAOut[[400]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index)
anova(tMod)
with_inf_index = applyInfInd(PCAOut[[400]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index)
anova(tMod)
with_inf_index[, list(mean(InfInd), sd(InfInd)), by = Diet]
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index)
anova(tMod)
with_inf_index = applyInfInd(PCAOut[[400]][[4]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index)
anova(tMod)
with_inf_index[, list(mean(InfInd), sd(InfInd)), by = Diet]
with_inf_index
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[TCS == 500])
anova(tMod)
with_inf_index
with_inf_index[, .N, by = CellNo]
with_inf_index[, .N, by = CellNo][N > 1]
with_inf_index[CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo]
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[TCS == 500])
anova(tMod)
with_inf_index[CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo]
with_inf_index[, .N, by = CellNo][N > 1]$CellNo
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
with_inf_index = applyInfInd(PCAOut[[400]][[4]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)][, list(mean(InfInd), sd(InfInd)), by = Diet]
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)][, .N, by = Diet]
unique(with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]$CellNo)
length(unique(with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]$CellNo))
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)][, length(unique(CellNo)), by = Diet]
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)][, length(unique(Animal)), by = Diet]
unique(with_inf_index$Animal)
toPassTrain
unique(toPassTrain$Treatment)
procDat = toPassTrain[Treatment %in% LPSGroups & Diet == 'Control']
unique(procDat$Treatment)
unique(procDat$Animal)
toPass
unique(toPass$Treatment
)
toPass = merge(output_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
cleaned = toPass[Treatment == 'D56']
cleaned
unique(cleaned$Diet    )
unique(cleaned$Treatment)
unique(cleaned$TCS)
unique(cleaned$Animal)
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE]
unique(cleaned$Animal)
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE & TCS == 500]
unique(cleaned$Animal)
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE & TCS == 500]
with_inf_index = applyInfInd(PCAOut[[400]][[4]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE]
with_inf_index = applyInfInd(PCAOut[[400]][[4]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE]
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE & TCS == 500]
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE]
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)])
anova(tMod)
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)][, list(mean(InfInd), sd(InfInd)), by = Diet]
with_inf_index
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]$TCS
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)][, .N, by = CellNo]
with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)][, .N, by = CellNo][N>1]
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
with_inf_index_clean = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]
with_inf_index_clean[, TCS := 400]
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index_clean)
anova(tMod)
with_inf_index_clean[, list(mean(InfInd), sd(InfInd)), by = Diet]
fwrite(with_inf_index_clean, file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig3cdietcomprevision.csv')
for_eff_size = applyInfInd(PCOut$PCA, procDat[TCSValue == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
require(emmeans)
for_eff_size = applyInfInd(PCOut$PCA, procDat[TCSValue == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
for_eff_size = applyInfInd(PCAOut[[500]][[2]], procDat[TCSValue == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
for_eff_size = applyInfInd(PCAOut[[500]][[2]], procDat[TCS == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
for_eff_size = applyInfInd(PCAOut[[400]][[2]], procDat[TCS == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
for_eff_size = applyInfInd(PCAOut[[400]][[4]], procDat[TCS == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
with_inf_index = applyInfInd(PCAOut[[400]][[4]], cleaned)
with_inf_index_clean = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]
with_inf_index_clean[, TCS := 400]
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index_clean)
anova(tMod)
with_inf_index = applyInfInd(PCAOut[[400]][[4]], cleaned)
with_inf_index_clean = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]
with_inf_index_clean[, TCS := 400]
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index_clean)
anova(tMod)for_eff_size = applyInfInd(PCAOut[[500]][[2]], procDat[TCS == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
for_eff_size = applyInfInd(PCAOut[[500]][[2]], procDat[TCS == 400])
effMod = lme(fixed = InfInd ~ Treatment, random = ~1|Animal, data = for_eff_size)
eff_size(emmeans(effMod, pairwise ~ Treatment, data = for_eff_size), sigma = sigma(effMod), edf=  100)
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = 'jitter') +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') +
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = 'jitter') +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') +
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none')
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
with_inf_index_clean = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]
with_inf_index_clean[, TCS := 400]
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index_clean)
anova(tMod)
with_inf_index_clean[, list(mean(InfInd), sd(InfInd)), by = Diet]
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = 'jitter') +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') +
ylab('Inflammation Index') + theme_bw()
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = 'jitter') +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') +
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = 'jitter') +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') +
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none')
fig_three_plot_no_annotations = ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = 'jitter') +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') +
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())
ggsave("fig3_diet_comparison_no_annotations_cor_removed.pdf", plot = fig_three_plot_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 150, height = 100, units = "mm")
fig_three_plot = ggplot(data = with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = 'jitter') +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', col = 'black') +
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none')
ggsave("fig3_diet_comparison_cor_removed.pdf", plot = fig_three_plot, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 150, height = 100, units = "mm")
with_inf_index_clean[, length(unique(cellNo)), by = Diet]
with_inf_index_clean[, length(unique(CellNo)), by = Diet]
with_inf_index_clean[, length(unique(Animal)), by = Diet]
for_abuse_train = copy(toPassTrain)
for_abuse_train[, Treatment := ifelse(Diet == 'High Fat', 'High Fat', 'Control')]
for_abuse_train[, Diet := NULL]
setnames(for_abuse_train, old = 'TCS', new = 'TCSValue', skip_absent = T)
PCOutAbuse = constructInfInd(for_abuse_train[TCSValue == 500],
method = 'AUC',
noDesc = 1:15)
for_abuse = copy(toPass[TCS == 500])
setnames(for_abuse, old = 'TCS', new = 'TCSValue', skip_absent = T)
for_abuse[, InfInd := predict(PCOutAbuse$PCA, newdata = for_abuse)[,1]]
anova(lme(fixed = InfInd ~ Diet, random =  ~ 1|Animal, data = for_abuse))
# Specify our image storage and working directory for our LPS training data
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Image Storage/'
LPSworkingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/LPS Working Directory/Output'
animalTreatmentIDs = getAnimalAndTreatmentIDs(imageStorageDirectory = imageStorageDirectory)
# Collate our lPS data
LPSoutDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = LPSworkingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
# Clean it up
lpsData = copy(LPSoutDt)
lpsData[Treatment != 'LPS T1', Treatment := 'D56 T1']
LPSGroups = c('LPS T1', 'D56 T1')
# Get a vector of animal IDs that have only had control diet treatment
controlIDs = c("BK1L", "BR1R", "BT1L", "BU1L1R", "BX1R", "CE1L", "CE1R",  "CW2R",  "DARTH","SNOKE")
# Filter our data to only include control animals
inDat = lpsData[Treatment %in% LPSGroups & Animal %in% controlIDs]
# Use the AUC method to construct an inflammation index on this dataset
method = 'AUC'
infIndOut =
constructInfInd(procDat = inDat,
method = method)
infDt = applyInfInd(infIndOut$PCA, inDat)
# Plot this data using the identified optimal TCS value
require(ggplot2)
ggplot(data = infDt[TCSValue == 200], aes(x = Treatment, y = InfInd)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x), geom = 'crossbar') +
geom_point()
# Analyse the effect of LPS on this dataset
effMod = lme(InfInd ~ Treatment, data = infDt[TCSValue == 200 & complete.cases(infDt)], random = ~1|Animal)
require(emmeans)
eff_size(emmeans(effMod, pairwise ~ Treatment, data =  infDt[TCSValue == 200 & complete.cases(infDt)]), sigma = sigma(effMod), edf=  100)
# Get the working directory for the rest of our analysis
workingDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Plugin - Motility Data/Working Directory/Output'
# Collate this data
outDt = morphPreProcessing(
pixelSize = 0.27,
morphologyWD = workingDirectory,
animalIDs = animalTreatmentIDs$animalIDs,
treatmentIDs = animalTreatmentIDs$treatmentIDs,
useFrac = T
)
# Apply our trained inflammation index to this dataset
outDtInf = applyInfInd(infIndOut$PCA, outDt[TCSValue == 200])
outDtInf = outDtInf[complete.cases(outDtInf)]
# Cleanup our timepoint labelling
outDtInf[grepl('T1', Treatment), newLab := 'T1']
outDtInf[grepl('T2', Treatment), newLab := 'T2']
outDtInf[grepl('T4', Treatment), newLab := 'T4']
# Identify animals where we have data from timepoints T1 and T4 and filter our data for these
animalsToUse = outDtInf[order(Animal) & newLab %in% c('T1', 'T4'), .N, by = list(Animal, Treatment)][, .N, by = Animal][N > 1]$Animal
cleanData = outDtInf[Animal %in% animalsToUse & newLab %in% c('T1', 'T4') & InfInd > -2000]
# Create a function that extracts the x and y coordinates from a string that contains them
getCoords <- function(string) {
coords = strsplit(tolower(string)[1], 'x')[[1]][2]
x = as.numeric(substr(strsplit(coords, ' y')[[1]][1],0,4))
ybase = strsplit(coords, ' y')[[1]][2]
y = as.numeric(substr(strsplit(ybase, ' tif')[[1]][1], 0, 4))
return(c(x, y))
}
# Apply this function to get our x and y coordinates
coordVector = sapply(cleanData$UniqueID, getCoords)
cleanData$x = coordVector[c(T,F)]
cleanData$y = coordVector[c(F,T)]
# For each animal
aniList = list()
for(currentAnimal in unique(cleanData$Animal)) {
aniData = cleanData[Animal == currentAnimal]
aniData[, newId := UniqueID]
# For each cell
for(currentCell in seq(1:nrow(aniData))) {
# Compute the euclidean distance between it and all other cells for that animal
distances = apply(
aniData[, list(x, y)], 1, function(x,y) {
pointDistance(c(x[1], x[2]), c(y$x, y$y), lonlat = F)
},
aniData[currentCell, list(x,y)])
# For distances that are less than 25 units, and also not the same cell, flag these as adjacent
# to the cell being checked. Also rename this cell with the same uniqueID so we can
# group them
potentials = which(distances < 25 & distances > 0)
aniData[potentials, adjFlag := 1]
aniData[potentials, newId := aniData[currentCell, newId]]
}
aniList[[currentAnimal]] = aniData
}
# Bind our datastes together, and plot
newDat = rbindlist(aniList)
# Split by animal
ggplot(data = newDat[adjFlag == 1], aes(x = newLab, y = InfInd, col = newId)) +
geom_point() +
geom_path(data = newDat[adjFlag == 1], aes(group = newId)) +
facet_wrap(.~Animal) +
theme(legend.position = 'none')
# Grouped by timepoint
motilityCompPlot = ggplot(data = newDat[adjFlag == 1], aes(x = newLab, y = InfInd)) +
geom_point(aes(col = newId, shape = Animal), size = 3) +
geom_path(data = newDat[adjFlag == 1], aes(col = newId, group = newId)) +
stat_summary(data = newDat[adjFlag == 1], aes(x = newLab, y = InfInd),
fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
# Save it
ggsave(filename = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Figures/fig5fourDComparison.pdf',
plot = motilityCompPlot,
device = 'pdf')
# Analyse the effect of timepoint
anova(lme(InfInd ~ newLab, data = newDat[adjFlag == 1], random = ~1|Animal))
# Identify the example cells were using in our figure
newDat[adjFlag == 1 & Animal == 'BG1L' & newId == 'bg1lhfdd-1 t4200candidate mask for 15-20 x 198 y 202 tif']
require(raster)
# For each animal
aniList = list()
for(currentAnimal in unique(cleanData$Animal)) {
aniData = cleanData[Animal == currentAnimal]
aniData[, newId := UniqueID]
# For each cell
for(currentCell in seq(1:nrow(aniData))) {
# Compute the euclidean distance between it and all other cells for that animal
distances = apply(
aniData[, list(x, y)], 1, function(x,y) {
pointDistance(c(x[1], x[2]), c(y$x, y$y), lonlat = F)
},
aniData[currentCell, list(x,y)])
# For distances that are less than 25 units, and also not the same cell, flag these as adjacent
# to the cell being checked. Also rename this cell with the same uniqueID so we can
# group them
potentials = which(distances < 25 & distances > 0)
aniData[potentials, adjFlag := 1]
aniData[potentials, newId := aniData[currentCell, newId]]
}
aniList[[currentAnimal]] = aniData
}
# Bind our datastes together, and plot
newDat = rbindlist(aniList)
# Split by animal
ggplot(data = newDat[adjFlag == 1], aes(x = newLab, y = InfInd, col = newId)) +
geom_point() +
geom_path(data = newDat[adjFlag == 1], aes(group = newId)) +
facet_wrap(.~Animal) +
theme(legend.position = 'none')
# Grouped by timepoint
motilityCompPlot = ggplot(data = newDat[adjFlag == 1], aes(x = newLab, y = InfInd)) +
geom_point(aes(col = newId, shape = Animal), size = 3) +
geom_path(data = newDat[adjFlag == 1], aes(col = newId, group = newId)) +
stat_summary(data = newDat[adjFlag == 1], aes(x = newLab, y = InfInd),
fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
anova(lme(InfInd ~ newLab, data = newDat[adjFlag == 1], random = ~1|Animal))
newDat[adjFlag == 1]
newDat[adjFlag == 1]$TCStoWrite = newDat[adjFlag == 1]
toWrite[, list(Treatment := NULL, TCS := NULL, newId := NULL, adjFlag := NULL)]
toWrite = newDat[adjFlag == 1]
toWrite[, list(Treatment := NULL, TCS := NULL, newId := NULL, adjFlag := NULL)]
toWrite[, c(Treatment := NULL, TCS := NULL, newId := NULL, adjFlag := NULL)]
toWrite[, c(Treatment, TCS, newId, adjFlag) := NULL]
toWrite[, list(Treatment, TCS, newId, adjFlag) := NULL]
toWrite$Treatment
toWrite[, c('Treatment', 'TCS', 'newId', 'adjFlag') := NULL]
toWrite[, c('Treatment', 'TCSValue', 'newId', 'adjFlag') := NULL]
TCS
toWrite
toWrite = newDat[adjFlag == 1]
toWrite[, c('Treatment', 'TCSValue', 'newId', 'adjFlag', 'UniqueID', 'x', 'y') := NULL]
setnames(toWrite, old = 'newLab', new = 'Treatment', skip_absent = T)
toWrite
fwrite(toWrite, file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig5timepointsdata.csv')
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index_clean)
anova(tMod)
infIndPlotting[Vals == 5]
unique(infIndPlotting[Vals == 5]$TCS)
forComp = unique(rbindlist(tableOut))
# Manually fix issues due to TCS labeling in raw data
forComp[TCS == 400, TCS := 0]
forComp[TCS == 500, TCS := 400]
forComp[TCS == 0, TCS := 500]
forComp[which.max(forComp$AUC)]
infIndPlotting = rbindlist(dataOut)
# Manually fix issues due to TCS labeling in raw data
infIndPlotting[TCS == 400, TCS := 0]
infIndPlotting[TCS == 500, TCS := 400]
infIndPlotting[TCS == 0, TCS := 500]
tcs_comp_no_annotations = ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_tcs_comp_initial_inf_ind_no_annotations.pdf", plot = tcs_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
fwrite(infIndPlotting[Vals == 5], file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig3Amasksizerevision.csv')
tcs_comp = ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_tcs_comp_initial_inf_ind.pdf", plot = tcs_comp, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
desc_comp_no_annotations = ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(Vals)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_no_desc_comp_initial_inf_ind_no_annotations.pdf", plot = desc_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
tcs_comp_no_annotations = ggplot(data = infIndPlotting[Vals == 5], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(TCS)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_tcs_comp_initial_inf_ind_no_annotations.pdf", plot = tcs_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
fwrite(infIndPlotting[Vals == 5], file = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Open Biology/fig3Amasksizerevision.csv')
unique(infIndPlotting[Vals == 5]$TCS)
ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(Vals)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
desc_comp = ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd)) +
geom_point(position = position_jitterdodge(), alpha = 0.5, shape = 21, size  = 4, aes(col = Treatment)) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment, col = Treatment), alpha = 0.3)+
facet_grid(cols = vars(Vals)) +
theme_bw() + ylab('Preliminary Inflammation Index') +
theme(legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_no_desc_comp_initial_inf_ind.pdf", plot = desc_comp, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 200, height = 100, units = "mm")
desc_comp_no_annotations = ggplot(data = infIndPlotting[TCS == 400 & Vals <= 6], aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.4, shape = 21, size  = 4, stroke = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Treatment), alpha = 0.3, fatten = 1, size = 2)+
facet_grid(cols = vars(Vals)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(), axis.text.y = element_blank(), legend.title = element_blank(),
legend.text = element_blank(), strip.background = element_blank(), strip.text = element_blank(),
legend.key.size = unit(3,"line"), legend.direction = 'horizontal', legend.position ='bottom') +
scale_color_manual(values = c('dark green', 'purple')) + scale_fill_manual(values = c('dark green', 'purple'))
ggsave("fig3_no_desc_comp_initial_inf_ind_no_annotations.pdf", plot = desc_comp_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 400, height = 100, units = "mm")
document()
