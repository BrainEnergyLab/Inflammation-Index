theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(position = position_jitterdodge(), alpha = 0.6, shape = 21, size  = 2, stroke = 1, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
scale_color_brewer(palette="Dark2") +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
scale_color_brewer(palette="Dark2") +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
scale_color_brewer(palette="Dark2") +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
scale_color_brewer(palette="Dark2") +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette = 'Dark2') +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar') +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd, col = Treatment)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette = 'Dark2') +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette = 'Dark2') +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1, aes(col = Treatment)) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank())
attwellCompPlot = ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette = 'Dark2') +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1, aes(col = Treatment)) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette = 'Dark2') +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1, aes(col = Treatment)) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Grouped by timepoint
attwellCompPlot = ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette = 'Dark2') +
geom_point(alpha = 0.6, shape = 21, size  = 2, stroke = 1, aes(col = Treatment)) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Save it
ggsave(filename = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Figures/fig5attwellComparison.pdf',
plot = attwellCompPlot,
device = 'pdf',
width = 10, height = 9, units = 'cm')
attwellCompPlot = ggplot(data = lowTestLabelled, aes(x = Treatment, y = InfInd)) +
scale_color_brewer(palette="Dark2") +
scale_fill_brewer(palette = 'Dark2') +
geom_point(alpha = 0.6, shape = 21, size  = 4, stroke = 1, aes(col = Treatment)) +
stat_summary(aes(fill = Treatment), fun = mean, fun.min = function(x) mean(x) - sd(x), fun.max = function(x) mean(x) + sd(x),
geom = 'crossbar', alpha = 0.3) +
theme_bw() +
theme(legend.position = 'none',
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Save it
ggsave(filename = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Manuscripts/Microglia methods/Figures/fig5attwellComparison.pdf',
plot = attwellCompPlot,
device = 'pdf',
width = 10, height = 9, units = 'cm')
# If we're on mac, set the path to dropbox as in /Users/Devin/ and the github
# path as in /Users/Devin/Documents else set dropPath in windows to E:/
if(.Platform$OS.type == "unix") {
dropPath = file.path("", "Users", "devin.clarke")
gitPath = file.path("", "Users", "devin.clarke", "Documents")
} else if (.Platform$OS.type == "windows") {
dropPath = file.path("E:")
}
# Add on the dropbox file structure to dropPath
dropPath = file.path(dropPath, "Dropbox (Brain Energy Lab)", "Everything")
# If we're on window set gitPath to being within dropPath in the Devin folder
#if(.Platform$OS.type == "windows") {
#  gitPath = file.path(dropPath, "Devin")
#}
# Add GitHub to the gitPath
#gitPath = file.path(gitPath, "GitHub")
gitPath = '/Users/devin.clarke/Documents/GitHub'
# Here we source our dependent functions, PCACleanCols and get Results
functionsDir =
file.path(gitPath, "ThesisCode", "Microglia-Analysis",
"MicrogliaMorphologyAnalysis Functions")
# If it's not sourced, source the function for binning a vector and getting
# out our info for each animal i.e. diet, sex, age etc.
find = c("microMorphBoundWeights")
locations =
c(file.path(functionsDir,"microMorphBoundWeights.R"))
for(index in 1:length(find)) {
if(!exists(find[index])) {
source(locations[index])
}
}
rm("find", "locations")
inVivoInfoFile = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoMouseInfo.csv")
inVivoWeightsLog = file.path(dropPath, "Devin", "HFD Data", "In Vivo Data", "InVivoWeightsLog.csv")
boundWeights = microMorphBoundWeights(inVivoInfoFile, inVivoWeightsLog)
# Set the arguments needed for the preprocessing data
pixelSize = 0.58
morphologyWDSelection = file.path(dropPath, "Devin", "2P Data Analysis", "Microglial Morphology", "Output")
animalIDs = unique(boundWeights$Animal)[]
treatmentIDs = as.character(unique(boundWeights$Timepoint))
treatmentIDs = treatmentIDs[is.na(treatmentIDs)==F]
LPSGroups = c("D56", "LPS")
useFrac = F
otherExclusions = list("Col" = "Diet", "Cond" = "Control")
method = "p value"
altMorphSelection = "/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Storage/Choice April 2019/Output"
## Train on LPS Data without HFD cells
output =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = morphologyWDSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
lps_comp_data =
morphPreProcessingLegacy(
pixelSize = pixelSize, morphologyWD = altMorphSelection,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
output_to_save = output[Treatment == 'D56']
lps_to_save = lps_comp_data[(Treatment != 'D1')]
correctCellNo <- function(inputDT) {
output_to_save = copy(inputDT)
cellNames = sapply(output_to_save$UniqueID, function(x) {
temp = substring(x, gregexpr('CANDIDATE', x))
substring(temp, 1, gregexpr('Y', temp)[[1]][1]+3)
})
uniqueCells = as.data.table(unique(cellNames))
uniqueCells[, CellNo := seq(1:nrow(uniqueCells))]
output_to_save[, MaskNames := cellNames]
setkey(uniqueCells, V1)
output_to_save[, CellNo := NULL]
setkey(output_to_save, MaskNames)
output_to_save[uniqueCells, CellNo := CellNo]
output_to_save[, MaskNames := NULL]
return(output_to_save)
}
output_to_save = correctCellNo(output_to_save)
lps_to_save = correctCellNo(lps_to_save)
#lps_to_save[, CellNo := CellNo + max(output_to_save$CellNo)]
#to_save = rbind(output_to_save, lps_to_save)
#writeTo = '/Users/devin.clarke/Google Drive/Inflammation Index R Package Example Data/example_morphpreprocessing_output.csv'
#fwrite(to_save, writeTo)
toPass = merge(output_to_save, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
toPassTrain = merge(lps_comp_data, unique(boundWeights[, list(Animal, Diet)]), by = "Animal")
# Get out our training data
procDat = toPassTrain[Treatment %in% LPSGroups & Diet == 'Control']
labCols =
labCols = c(c("Animal", "CellNo", "TCS", "Treatment", "UniqueID"), otherExclusions$Col)
aucStorage = list()
# For each TCS value we have in our training data
for(currTCS in unique(procDat$TCS)) {
# Get out gathered data for this TCS value
format_list = formatROCRInput(procDat[TCS == currTCS], labCols)
# Get out AUC values for every metric in our gathered data
ROC_list = lapply(unique(format_list$Parameter), function(x, aggData) {
out = getROCValues(aggData, currParam = x)
out[, Parameter := x]
}, format_list)
aucStorage[[currTCS]] = rbindlist(ROC_list)
}
poorDisc = 'Kurtosis(fit)'
goodDisc = '#Slabvoxels'
discs_to_plots = lapply(c(poorDisc, goodDisc), function(x, aggData) {
pred = ROCR::prediction(aggData[Parameter == x, Value], aggData[Parameter == x, Treatment])
forPlot =  ROCR::performance(pred,"tpr","fpr")
FPR = unlist(forPlot@x.values)
TPR = unlist(forPlot@y.values)
plot_roc = data.table(FPR, TPR)
plot_roc[, disc := x]
}, format_list)
plotting_data = rbindlist(discs_to_plots)
roc_auc_plot = ggplot(data = plotting_data, aes(x = FPR, y = TPR)) + geom_line(data = plotting_data[disc == 'Kurtosis(fit)'], col = 'red') +
geom_line(data = plotting_data[disc != 'Kurtosis(fit)'], col = 'blue') +
geom_ribbon(data = plotting_data[disc == 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'red', alpha = 0.5) +
geom_ribbon(data = plotting_data[disc != 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'cyan', alpha = 0.2) +
annotate("text", x = 0.85, y = 0.25, label = paste(poorDisc, round(aucStorage[[500]][Parameter == poorDisc]$AUC,2), sep = '\nPoor Discriminator \nAUC: '), col = 'red') +
annotate("text", x = 0.15, y = 0.75, label = paste(goodDisc, round(aucStorage[[500]][Parameter == goodDisc]$AUC,2), sep = '\nGood Discriminator \nAUC: '), col = 'blue') +
ylab('True Positive Rate') +
xlab('False Positive Rate')
#ggsave("fig3_roc_auc_plot_annotated.pdf", plot = roc_auc_plot, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
#       dpi = "retina", width = 150, height = 100, units = "mm")
roc_auc_plot_no_annotations = ggplot(data = plotting_data, aes(x = FPR, y = TPR)) + geom_line(data = plotting_data[disc == 'Kurtosis(fit)'], col = 'red') +
geom_line(data = plotting_data[disc != 'Kurtosis(fit)'], col = 'blue') +
geom_ribbon(data = plotting_data[disc == 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'red', alpha = 0.5) +
geom_ribbon(data = plotting_data[disc != 'Kurtosis(fit)'], aes(ymin = 0, ymax = TPR), fill = 'cyan', alpha = 0.2) +
theme(axis.text.y = element_blank(), axis.title.y = element_blank(), axis.text.x = element_blank(), axis.title.x = element_blank())
#ggsave("fig3_roc_auc_plot_no_annotations.pdf", plot = roc_auc_plot_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
#       dpi = "retina", width = 150, height = 100, units = "mm")
################# For pulling nicely formatted outputs
tableOut = list()
PCAOut = list()
dataOut = list()
addIndex = 1
noDesc = 1:15
# For each TCS value we have in our training data
for(currTCS in unique(procDat$TCS)) {
PCAOut[[currTCS]] = list()
# Get out gathered data for this TCS value
aggData = formatROCRInput(copy(procDat[TCS == currTCS]), labCols)
# Get out AUC values for every metric in our gathered data
ROCList = list()
for(currMetric in unique(aggData$Parameter)) {
ROCList[[currMetric]] = getROCValues(aggData, currMetric)
ROCList[[currMetric]]$Parameter = currMetric
}
paramByAuc = rbindlist(ROCList)
# Loop through whether we're using the 1st, 1st+2nd, 1st+2nd+3rd etc. best discriminators
for(howMany in noDesc) {
# Get the PCA of our inflammation index, and a table of evaluation metrics
infIndices = createEvaluateInfIndex(paramByAuc, howMany, method = 'AUC', aggData, labCols, 0.9)
spreadDat = as.data.table(spread(aggData, Parameter, Value))
spreadDat[, InfInd := predict(infIndices$PCAOut, newdata = spreadDat)[,1]]
spreadDat[, TCS := currTCS]
spreadDat[, Vals := howMany]
dataOut[[addIndex]] = spreadDat
# Return our inflammation index PCA and pval and AUC values
PCAOut[[currTCS]][[howMany]] = infIndices$PCAOut
tableOut[[addIndex]] = infIndices$tableOut
tableOut[[addIndex]][, TCS := currTCS]
tableOut[[addIndex]][, Vals := howMany]
tableOut[[addIndex]][, Metrics := paste(infIndices$chosenMetrics, collapse = ",")]
addIndex = addIndex+1
}
}
# Combine our tableOut tables into a single data.table
forComp = unique(rbindlist(tableOut))
# Manually fix issues due to TCS labeling in raw data
forComp[TCS == 400, TCS := 0]
forComp[TCS == 500, TCS := 400]
forComp[TCS == 0, TCS := 500]
#saveLoc = '/Users/devin.clarke/Documents/GitHub/Manuscripts/Methods Paper/'
#fwrite(forComp[TCS == 400, ], file = file.path(saveLoc, 'Fig3ACompareNoDescAUC.csv'))
#################
infIndPlotting = rbindlist(dataOut)
# Manually fix issues due to TCS labeling in raw data
infIndPlotting[TCS == 400, TCS := 0]
infIndPlotting[TCS == 500, TCS := 400]
infIndPlotting[TCS == 0, TCS := 500]
# Get out our training data
setnames(procDat, old = c('TCS'), new = c('TCSValue'))
applyTo = toPass[Treatment == 'D56']
setnames(applyTo, old = c('TCS'), new = c('TCSValue'))
#cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE]
cleaned = toPass[Treatment == 'D56' & grepl('HIPP', Animal) == FALSE]
with_inf_index = applyInfInd(PCAOut[[500]][[2]], cleaned)
with_inf_index_clean = with_inf_index[!(CellNo %in% with_inf_index[, .N, by = CellNo][N > 1]$CellNo)]
with_inf_index_clean[, TCS := 400]
tMod = lme(fixed = InfInd ~ Diet, random = ~1|Animal, data = with_inf_index_clean)
anova(tMod)
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = position_jitterdodge(), alpha = 0.6, shape = 21, size  = 2, stroke = 1, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Diet), alpha = 0.3, fatten = 1, size = 0.5)+
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = position_jitterdodge(), alpha = 0.6, shape = 21, size  = 2, stroke = 1, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Diet), alpha = 0.3, fatten = 1, size = 0.5)+
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = position_jitterdodge(), alpha = 0.6, shape = 21, size  = 2, stroke = 1, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Diet), alpha = 0.3)+
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd, col = Diet)) +
geom_point(position = position_jitterdodge(), alpha = 0.6, shape = 21, size  = 2, stroke = 1, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Diet), alpha = 0.3)+
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd)) +
geom_point(aes(col = Diet), position = position_jitterdodge(), alpha = 0.6, shape = 21, size  = 2, stroke = 1, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Diet), alpha = 0.3)+
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
fig_three_plot_no_annotations = ggplot(data =  with_inf_index_clean, aes(x = Diet, y = InfInd)) +
geom_point(aes(col = Diet), position = position_jitterdodge(), alpha = 0.6, shape = 21, size  = 2, stroke = 1, jitter = 2) +
stat_summary(fun = mean, fun.min = function(x) mean(x) - sd(x),
fun.max = function(x) mean(x) + sd(x), geom = 'crossbar', aes(fill = Diet), alpha = 0.3)+
ylab('Inflammation Index') + theme_bw() +
theme(legend.position = 'none', axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave("fig3_diet_comparison_no_annotations_cor_removed.pdf", plot = fig_three_plot_no_annotations, "pdf", path = file.path(dropPath, 'Manuscripts', 'Microglia methods', 'Figures'),
dpi = "retina", width = 75, height = 58, units = "mm")
require(devtools)
load_all()
require(devtools)
install_github("BrainEnergyLab/Inflammation-Index/R Package")
require(devtools)
install_github("BrainEnergyLab/Inflammation-Index/R Package")
require(data.table)
require(data.table)
require(devtools)
load_all()
?morphPreProcessing
# Pixel size in microns
pixelSize = 0.58
# Output directory of the MicroMorph.ijm script as a string
morphologyWD = "/Microglial Morphology/Output"
# Vector of strings identifying the names of the animals images were captured
# from and matching the names of the Animal level folders
animalIDs = c('HIPP5', 'HIPP6', 'HIPP7')
# Vector of strings identifying different treatments and matching the names
# of the Treatment level folders
treatmentIDs = c('Pre-LPS', 'Post-LPS')
# Optional:
# Boolean indicating whether to use the output of the FracLac plugin
useFrac = T
# String vector of mask sizes to exclude from the preprocessing function, can also take NULL
TCSExclude = NULL
# Alternatively:
# TCSExclude = c(400, 500, 600)
# Pixel size in microns
pixelSize = 0.58
# Output directory of the MicroMorph.ijm script as a string
morphologyWD = "/Microglial Morphology/Output"
# Vector of strings identifying the names of the animals images were captured
# from and matching the names of the Animal level folders
animalIDs = c('HIPP5', 'HIPP6', 'HIPP7')
# Vector of strings identifying different treatments and matching the names
# of the Treatment level folders
treatmentIDs = c('Pre-LPS', 'Post-LPS')
# Optional:
# Boolean indicating whether to use the output of the FracLac plugin
useFrac = T
# String vector of mask sizes to exclude from the preprocessing function, can also take NULL
TCSExclude = NULL
# Alternatively:
# TCSExclude = c(400, 500, 600)
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Analysis Plugin - ImageJ Example Directory and Input Data; Plugin Run Complete/Image Storage Directory/'
morphologyWD = '/Users/devin.clarke/Google Drive/Microglia Morphology Analysis Plugin - ImageJ Example Directory and Input Data; Plugin Run Complete/Working Directory/Output'
imageStorageDirectoryOld = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/2P data/Devin/'
morphologyWDOld = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Output/'
exampleData = '/Users/devin.clarke/Google Drive/Inflammation Index R Package Example Data/example_morphpreprocessing_output.csv'
imageStorageDirectory = '/Users/devin.clarke/Google Drive/Microglia Morphology Analysis Plugin - ImageJ Example Directory and Input Data; Plugin Run Complete/Image Storage Directory/'
morphologyWD = '/Users/devin.clarke/Google Drive/Microglia Morphology Analysis Plugin - ImageJ Example Directory and Input Data; Plugin Run Complete/Working Directory/Output'
imageStorageDirectoryOld = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/2P data/Devin/'
morphologyWDOld = '/Users/devin.clarke/Dropbox (Brain Energy Lab)/Everything/Devin/2P Data Analysis/Microglial Morphology/Output/'
exampleData = '/Users/devin.clarke/Google Drive/Inflammation Index R Package Example Data/example_morphpreprocessing_output.csv'
idList = InflammationIndex::getAnimalAndTreatmentIDs(imageStorageDirectory)
treatmentIDs = idList$treatmentIDs
animalIDs = idList$animalIDs
idList
output =
morphPreProcessing(
pixelSize = pixelSize, morphologyWD = morphologyWD,
animalIDs = animalIDs, treatmentIDs = treatmentIDs,
useFrac = useFrac)
head(output)
output
?constructInfInd
# A string vector indicating the treatment labels that ID our training data
LPSGroups = c('D56', 'LPS')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = output[, Treatment %in% LPSGroups]
# A string vector indicating the treatment labels that ID our training data
LPSGroups = c('D56', 'LPS')
# The output of the morphPreProcessing() function filtered to only include our
# training data
inDat = output[Treatment %in% LPSGroups]
inDat
output
output$Treatment
output = fread(exampleData)
setnames(output, old = c('TCS'), new = 'TCSValue')
inDat = output[Treatment %in% LPSGroups]
inDat
inDat[, list(UniqueID, CellNo)]
head(inDat)
infIndOut =
constructInfInd(procDat = inDat)
?constructInfInd
dataWithInfIndex = applyInfInd(infIndOut, output)
dataWithInfIndex = applyInfInd(infIndOut$PCA, output)
head(dataWithInfIndex[, list(Animal, Treatment, TCSValue, CellNo, InfInd)])
infIndOut$`Metric Correlations`
dataWithInfIndex = applyInfInd(infIndOut$PCA, output[TCSValue == infIndOut$`Optimal TCS`])
head(dataWithInfIndex[, list(Animal, Treatment, TCSValue, CellNo, InfInd)])
require(devtools)
load_all()
document()
load_all()
infIndOut =
constructInfInd(procDat = inDat)
infIndOut =
constructInfInd(procDat = inDat, method = 'p value')
document()
load_all()
infIndOut =
constructInfInd(procDat = inDat, method = 'p value')
dataWithInfIndex = applyInfInd(infIndOut$PCA, output[TCSValue == infIndOut$`Optimal TCS`])
document()
load_all()
